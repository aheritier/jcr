<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="WS.RestServiceTutorial">
  <?dbhtml filename="ch-rest-service-tutorial.html"?>

  <title>REST Service Tutorial</title>

  <important>
    <para>This article describes REST framework before version
    exo-ws-2.0.</para>
  </important>

  <section>
    <title>Introduction</title>

    <para>This HOW-TO explains how to create your own REST based services. In
    this HOW-TO we will create a simple calculator, which can do basic
    operations with integers.</para>
  </section>

  <section>
    <title>Source code</title>

    <programlisting>// ...
@URITemplate("/calculator/{item1}/{item2}/")
public class Calculator implements ResourceContainer {
}</programlisting>

    <para>Writing <command>@URITemplate</command> before the class definition
    gives you the possibility not to set it for each method. Furthermore the
    class must implement the interface <command>ResourceContainer</command>.
    This interface doesn't have any methods, it is just an indication for the
    <command>ResourceBinder</command>. Add the code for adding two
    integers.</para>

    <programlisting>// ...
@URITemplate("/calculator/{item1}/{item2}/")
public class Calculator implements ResourceContainer {
  @QueryTemplate("operation=add")
  @OutputTransformer(StringOutputTransformer.class)
  @HTTPMethod("GET")
  public Response add(@URIParam("item1") Integer item1,
      @URIParam("item2") Integer item2) {
    StringBuffer sb = new StringBuffer();
    sb.append(item1).append(" + ").append(item2).append(" = ").append(item1 + item2);
    return Response.Builder.ok(sb.toString(), "text/plain").build();
  }
}</programlisting>

    <para>@QueryTemplate("operation=add") - only requests with query
    parameters "operation=add" can reach this method;
    @OutputTransformer(StringOutputTransformer.class) - the output
    transformer; @HTTPMethod("GET") - the HTTP method "GET".</para>

    <para>Write the code for other operations in the same way. Then the result
    should look like:</para>

    <programlisting>package org.exoplatform.services.rest.example;

import org.exoplatform.services.rest.HTTPMethod;
import org.exoplatform.services.rest.OutputTransformer;
import org.exoplatform.services.rest.QueryTemplate;
import org.exoplatform.services.rest.Response;
import org.exoplatform.services.rest.URIParam;
import org.exoplatform.services.rest.URITemplate;
import org.exoplatform.services.rest.container.ResourceContainer;
import org.exoplatform.services.rest.transformer.StringOutputTransformer;

@URITemplate("/calculator/{item1}/{item2}/")
@OutputTransformer(StringOutputTransformer.class)
public class Calculator implements ResourceContainer {
  
  @QueryTemplate("operation=add")
  @HTTPMethod("GET")
  public Response add(@URIParam("item1") Integer item1, @URIParam("item2") Integer item2) {
    StringBuffer sb = new StringBuffer();
    sb.append(item1).append(" + ").append(item2).append(" = ").append(item1 + item2);
    return Response.Builder.ok(sb.toString(), "text/plain").build();
  }

  @QueryTemplate("operation=subtract")
  @HTTPMethod("GET")
  public Response subtract(@URIParam("item1") Integer item1, @URIParam("item2") Integer item2) {
    StringBuffer sb = new StringBuffer();
    sb.append(item1).append(" - ").append(item2).append(" = ").append(item1 - item2);
    return Response.Builder.ok(sb.toString(), "text/plain").build();
  }

  @QueryTemplate("operation=multiply")
  @HTTPMethod("GET")
  public Response multiply(@URIParam("item1") Integer item1, @URIParam("item2") Integer item2) {
    StringBuffer sb = new StringBuffer();
    sb.append(item1).append(" * ").append(item2).append(" = ").append(item1 * item2);
    return Response.Builder.ok(sb.toString(), "text/plain").build();
  }

  @QueryTemplate("operation=divide")
  @HTTPMethod("GET")
  public Response divide(@URIParam("item1") Integer item1, @URIParam("item2") Integer item2) {
    StringBuffer sb = new StringBuffer();
    sb.append(item1).append(" / ").append(item2).append(" = ").append(item1 / item2);
    return Response.Builder.ok(sb.toString(), "text/plain").build();
  }
}</programlisting>

    <para>So we are done with the source code.</para>
  </section>

  <section>
    <title>Configuration</title>

    <para>Create the directory conf/portal and create the file
    configuration.xml in it. Add the following code to this file:</para>

    <programlisting>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;configuration&gt;
  &lt;component&gt;
    &lt;type&gt;org.exoplatform.services.rest.example.Calculator&lt;/type&gt;
  &lt;/component&gt;
&lt;/configuration&gt;</programlisting>
  </section>

  <section>
    <title>Build</title>

    <para>Now we must create the following directory structure to get the
    possibility to build the source code using maven.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/rest-build-process.png" />
      </imageobject>
    </mediaobject>

    <para>Then create the file pom.xml using the following:</para>

    <programlisting>&lt;project&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.exoplatform.ws&lt;/groupId&gt;
    &lt;artifactId&gt;config&lt;/artifactId&gt;
    &lt;version&gt;trunk&lt;/version&gt;
  &lt;/parent&gt;

  &lt;modelVersion&amp;#624;.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.exoplatform.ws.rest&lt;/groupId&gt;
  &lt;artifactId&gt;simple.calculator&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;trunk&lt;/version&gt;
  &lt;description&gt;Simple REST service&lt;/description&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.exoplatform.ws.rest&lt;/groupId&gt;
      &lt;artifactId&gt;exo.rest.core&lt;/artifactId&gt;
      &lt;version&gt;trunk&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;</programlisting>

    <para>Build this by executing the command:</para>

    <programlisting>andrew@ubu:~/workspace/calculator$ mvn clean install</programlisting>
  </section>

  <section>
    <title>Deploy</title>

    <para>We have done all now. Then copy the jar file from the target
    directory of project exo-tomcat into the server with all prepared stuff
    for REST services. (You can download it here: <ulink
    url="http://forge.ow2.org/project/download.php?group_id=151&amp;file_id=9862">http://forge.objectweb.org/project/download.php?group_id=151&amp;file_id=9862</ulink>)</para>

    <para>So just put the jar file into the lib directory of the tomcat and
    restart it. In the console you should see this message:</para>

    <programlisting>[INFO] ResourceBinder - Bind new ResourceContainer: org.exoplatform.services.rest.example.Calculator@19846fd</programlisting>

    <para>This message indicates that our service was found, bound and is
    ready to work</para>
  </section>

  <section>
    <title>Usage</title>

    <para>Open your browser and type the following URL:
    <uri>http://localhost:8080/rest/calculator/12/5/?operation=add</uri> and
    you should see the next page:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/rest-run-process.png" />
      </imageobject>
    </mediaobject>

    <para>The service is working. This is a very simple example, but it should
    help developers use the REST framework.</para>

    <para>Try to check other URLs.</para>

    <itemizedlist>
      <listitem>
        <para><uri>http://localhost:8080/rest/calculator/12/5/?operation=subtract</uri>
        - must give "12 - 5 = 7";</para>
      </listitem>

      <listitem>
        <para><uri>http://localhost:8080/rest/calculator/12/5/?operation=multiply</uri>
        - must give "12 * 5 = 60";</para>
      </listitem>

      <listitem>
        <para><uri>http://localhost:8080/rest/calculator/12/5/?operation=divide</uri>-
        must give "12 / 5 = 2" (we are working with integers!);</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <?dbhtml filename="ch-ws.html"?>

  <title>SOAP Service Tutorial</title>

  <section>
    <title>Introduction</title>

    <para>In this tutorial you will learn how you can use JSR 181 to expose
    your Exo Container components as web services.</para>

    <para>The steps given below have been tested with eXo WS samples 2.0.2
    under Tomcat 6.0.16. It uses the WS tomcat bundle.</para>

    <para>You can use maven build within "ws/tags/2.0.2/application" to deploy
    this sample application configuration:</para>

    <programlisting>mvn clean install -f product-exo-ws-as-tomcat6.xml antrun:run</programlisting>
  </section>

  <section>
    <title>Add JSR 181 support to the deployed application</title>

    <para>The JSR181 support does not come by default in portal.</para>

    <para>The WS example tomcat bundle, which you can deploy with provided
    command above, has already all necessary libraries and SOAP servlet
    declarations.</para>

    <para>For any other bundles you have to done the two steps below.</para>

    <section>
      <title>Add dependencies</title>

      <para>First you need to add the necessary dependencies inside
      exo-tomcat/lib</para>

      <para>The required artifacts are :</para>

      <itemizedlist>
        <listitem>
          <para>exo.ws.soap.cxf.jsr181-2.0.2.jar</para>
        </listitem>

        <listitem>
          <para>exo.ws.application.soap.cxf.samples-2.0.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-rt-transports-http-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-api-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-rt-core-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-common-utilities-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>wsdl4j-1.6.1.jar</para>
        </listitem>

        <listitem>
          <para>geronimo-jaxws_2.1_spec-1.0.jar</para>
        </listitem>

        <listitem>
          <para>geronimo-ws-metadata_2.0_spec-1.1.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-rt-frontend-jaxws-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-rt-frontend-simple-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-rt-bindings-soap-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>XmlSchema-1.4.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-rt-databinding-jaxb-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>jaxb-impl-2.1.7.jar</para>
        </listitem>

        <listitem>
          <para>cxf-tools-common-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>cxf-rt-ws-addr-2.1.2.jar</para>
        </listitem>

        <listitem>
          <para>saaj-api-1.3.jar</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Configure CXF servlet</title>

      <para>Edit YOUR_APPLICATION.war/WEB-INF/web.xml and add the CXF servlet
      :</para>

      <programlisting>&lt;servlet&gt;
    &lt;servlet-name&gt;SOAPServlet&lt;/servlet-name&gt;
    &lt;display-name&gt;SOAP Servlet&lt;/display-name&gt;
    &lt;servlet-class&gt;org.exoplatform.services.ws.impl.cxf.transport.http.SOAPServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;SOAPServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/soap/services/*&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;</programlisting>

      <important>
        <para>alternatively, you could bundle cxf in a separate app, but make
        sure ws-examples.war starts before it</para>
      </important>
    </section>
  </section>

  <section>
    <title>Write the Web Service class</title>

    <para>We have a tiny sample to demonstrate called :
    TicketOrderService.</para>

    <para>Following JSR 181, it is now just a matter of annotating a class to
    create a Web Service. The main idea is the your interface has to extends
    extends AbstractSingletonWebService.</para>

    <programlisting>@WebService
public interface TicketOrderService extends AbstractSingletonWebService {

  /**
   * @param departing departing place.
   * @param arriving arriving place.
   * @param departureDate departure date.
   * @param passenger passenger.
   * @return ticket order.
   */
  public String getTicket(String departing, String arriving, Date departureDate, String passenger);

  /**
   * @param confirmation confirm or not.
   */
  public void confirmation(boolean confirmation);

}</programlisting>

    <programlisting>@WebService(serviceName = "TicketOrderService", 
            portName = "TicketOrderServicePort", 
            targetNamespace = "http://exoplatform.org/soap/cxf")
public class TicketOrderServiceImpl implements TicketOrderService {

  /**
   * Logger.
   */
  private static final Log LOG = ExoLogger.getLogger(TicketOrderServiceImpl.class);

  /**
   * Ticket.
   */
  private Ticket           ticket;

  /**
   * @param departing departing place.
   * @param arriving arriving place.
   * @param departureDate departure date.
   * @param passenger passenger.
   * @return ticket order.
   */
  public String getTicket(String departing, String arriving, Date departureDate, String passenger) {
    ticket = new Ticket(passenger, departing, arriving, departureDate);
    LOG.info(ticket);
    return String.valueOf(ticket.getOrder());
  }

  /**
   * @param confirmation confirm or not.
   */
  public void confirmation(boolean confirmation) {
    LOG.info("Confirmation : " + confirmation + " for order '" + ticket.getOrder() + "'.");
  }

}</programlisting>

    <para>To test quickly, you can simply grab the jar on eXo repository and
    deploy within your application.</para>
  </section>

  <section>
    <title>Configure the component</title>

    <programlisting>&lt;configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.exoplatform.org/xml/ns/kernel_1_0.xsd http://www.exoplatform.org/xml/ns/kernel_1_0.xsd"
    xmlns="http://www.exoplatform.org/xml/ns/kernel_1_0.xsd"&gt;
  &lt;component&gt;
    &lt;type&gt;org.exoplatform.services.ws.soap.jsr181.TicketOrderServiceImpl&lt;/type&gt;
  &lt;/component&gt;
&lt;/configuration&gt;</programlisting>
  </section>

  <section>
    <title>Verify it works.</title>

    <para>Start server.</para>

    <para>Execute script at
    ws/tags/2.0.2/application/java/services/samples/soap/client to test
    service</para>

    <programlisting>run.sh</programlisting>

    <para>and watch for this in the logs:</para>

    <programlisting>Sep 3, 2009 5:21:13 PM org.apache.cxf.endpoint.ServerImpl initDestination
INFO: Setting the server's publish address to be /TicketOrderService/TicketOrderServicePort
03.09.2009 17:21:13 *INFO * [http-8080-1] ExoDeployCXFUtils: The webservice '/TicketOrderService/TicketOrderServicePort' has been published SUCCESSFUL! (ExoDeployCXFUtils.java, line 190) 
03.09.2009 17:21:13 *INFO * [http-8080-1] WebServiceLoader: New singleton WebService '/TicketOrderService/TicketOrderServicePort' registered. (WebServiceLoader.java, line 95) 
03.09.2009 17:21:27 *INFO * [http-8080-1] TicketOrderServiceImpl: Ticket {, , , null, 1251991287079} (TicketOrderServiceImpl.java, line 57) 
03.09.2009 17:21:27 *INFO * [http-8080-1] TicketOrderServiceImpl: Confirmation : false for order '1251991287079'. (TicketOrderServiceImpl.java, line 65)</programlisting>

    <para>Now, your service is started and you can retrieve the WSDL at :
    <link
    linkend="???">http://localhost:8080/ws-examples/soap/services/TicketOrderService/TicketOrderServicePort?wsdl</link></para>
  </section>
</chapter>

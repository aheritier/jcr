<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <?dbhtml filename="ch-ws.html"?>

  <title>Groovy Scripts as REST Services</title>

  <section>
    <title>Overview</title>

    <para>This article describes how to use Groovy scripts as REST services.
    We are going to consider these operations:</para>

    <itemizedlist>
      <listitem>
        <para>Load script and save it in JCR.</para>
      </listitem>

      <listitem>
        <para>Instantiate script</para>
      </listitem>

      <listitem>
        <para>Deploy newly created Class as RESTful service.</para>
      </listitem>

      <listitem>
        <para>Script Lifecycle Management.</para>
      </listitem>

      <listitem>
        <para>And finally we will discover simple example which can get JCR
        node UUID</para>
      </listitem>
    </itemizedlist>

    <para>In this article we consider RESTful service compatible with JSR-311
    specification. Currently last feature available in version 1.11 of JCR,
    2.0 of WS and version 2.1.4 of core.</para>
  </section>

  <section>
    <title>Loading script and save it in JCR</title>

    <para>There are two ways to save a script in JCR. The first way is to save
    it at server startup time by using configuration.xml and the second way is
    to upload the script via HTTP.</para>

    <para><command>Load script at startup time</command></para>

    <para>This way can be used for load prepared scripts, for use this way we
    must configure
    org.exoplatform.services.jcr.ext.script.groovy.GroovyScript2RestLoaderPlugin.
    This is simple configuration example.</para>

    <programlisting>&lt;external-component-plugins&gt;
  &lt;target-component&gt;org.exoplatform.services.jcr.ext.script.groovy.GroovyScript2RestLoader&lt;/target-component&gt;
  &lt;component-plugin&gt;
    &lt;name&gt;test&lt;/name&gt;
    &lt;set-method&gt;addPlugin&lt;/set-method&gt;
    &lt;type&gt;org.exoplatform.services.jcr.ext.script.groovy.GroovyScript2RestLoaderPlugin&lt;/type&gt;
    &lt;init-params&gt;
      &lt;value-param&gt;
        &lt;name&gt;repository&lt;/name&gt;
        &lt;value&gt;repository&lt;/value&gt;
      &lt;/value-param&gt;
      &lt;value-param&gt;
        &lt;name&gt;workspace&lt;/name&gt;
        &lt;value&gt;production&lt;/value&gt;
      &lt;/value-param&gt;
      &lt;value-param&gt;
        &lt;name&gt;node&lt;/name&gt;
        &lt;value&gt;/script/groovy&lt;/value&gt;
      &lt;/value-param&gt;
      &lt;properties-param&gt;
        &lt;name&gt;JcrGroovyTest.groovy&lt;/name&gt;
        &lt;property name="autoload" value="true" /&gt;
        &lt;property name="path" value="file:/home/andrew/JcrGroovyTest.groovy" /&gt;
      &lt;/properties-param&gt;
    &lt;/init-params&gt;
  &lt;/component-plugin&gt;
&lt;/external-component-plugins&gt;</programlisting>

    <para>First value-param sets JCR repository, second value-param sets
    workspace and third one sets JCR node where scripts from plugin will be
    stored. If specified node does not exists then it will be created. List of
    scripts is set by properties-params. Name of each properties-param will be
    used as node name for stored script, property autoload says to deploy this
    script at startup time, property path sets the source of script to be
    loaded. In this example we try to load single script from local file
    /home/andrew/JcrGroovyTest.groovy.</para>

    <para><command>Load script via HTTP</command></para>

    <para>This is samples of HTTP requests. In this examples we will upload
    script from file with name test.groovy.</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X POST \
-H 'Content-type:script/groovy' \
--data-binary @test.groovy \
http://localhost:8080/rest/script/groovy/add/repository/production/script/groovy/test.groovy</programlisting>

    <para>This example imitate sending data with HTML form
    ('multipart/form-data'). Parameter autoload is optional. If parameter
    autoload=true then script will be instantiate and deploy script
    immediately.</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X POST \
-F "file=@test.groovy;name=test" \
-F "autoload=true" \
http://localhost:8080/rest/script/groovy/add/repository/production/script/groovy/test1.groovy</programlisting>
  </section>

  <section>
    <title>Instantiation</title>

    <para>org.exoplatform.services.script.groovy.GroovyScriptInstantiator is
    part of project exo.core.component.script.groovy. GroovyScriptInstantiator
    can load script from specified URL and parse stream that contains Groovy
    source code. It has possibility inject component from Container in Groovy
    Class constructor. Configuration example:</para>

    <programlisting>&lt;component&gt;
  &lt;type&gt;org.exoplatform.services.script.groovy.GroovyScriptInstantiator&lt;/type&gt;
&lt;/component&gt;</programlisting>
  </section>

  <section>
    <title>Deploy newly created Class as RESTful service</title>

    <para>For deploy script automatically at server statup time its property
    exo:autoload must be set as true.
    org.exoplatform.services.jcr.ext.script.groovy.GroovyScript2RestLoader
    check JCR workspaces which were specified in configuration and deploy all
    auto-loadable scripts.</para>

    <para>Example of configuration.</para>

    <programlisting>&lt;component&gt;
    &lt;type&gt;org.exoplatform.services.jcr.ext.script.groovy.GroovyScript2RestLoader&lt;/type&gt;
    &lt;init-params&gt;
      &lt;object-param&gt;
        &lt;name&gt;observation.config&lt;/name&gt;
        &lt;object type="org.exoplatform.services.jcr.ext.script.groovy.ObservationListenerConfiguration"&gt;
          &lt;field name="repository"&gt;
            &lt;string&gt;repository&lt;/string&gt;
          &lt;/field&gt;
          &lt;field name="workspaces"&gt;
            &lt;collection type="java.util.ArrayList"&gt;
              &lt;value&gt;
                &lt;string&gt;production&lt;/string&gt;
              &lt;/value&gt;
            &lt;/collection&gt;
          &lt;/field&gt;
        &lt;/object&gt;
      &lt;/object-param&gt;
    &lt;/init-params&gt;
  &lt;/component&gt;</programlisting>

    <para>In example above JCR workspace "production" will be checked for
    autoload scripts. At once this workspace will be listened for changes
    script's source code (property jcr:data).</para>
  </section>

  <section>
    <title>Script Lifecycle Management</title>

    <para>If GroovyScript2RestLoader configured as was decribed in previous
    section then all "autoload" scripts deployed. In first section we added
    script from file /home/andrew/JcrGroovyTest.groovy to JCR node
    /script/groovy/JcrGroovyTest.groovy, repository repository, workspace
    production. In section "Load script via HTTP" it was refered about load
    scripts via HTTP, there is an opportunity to manage the life cycle of
    script.</para>

    <para>Undeploy script, which is alredy deployed:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X GET \
http://localhost:8080/rest/script/groovy/load/repository/production/script/groovy/JcrGroovyTest.groovy?state=false</programlisting>

    <para>Then deploy it again:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X GET \
http://localhost:8080/rest/script/groovy/load/repository/production/script/groovy/JcrGroovyTest.groovy?state=true</programlisting>

    <para>or even more simple:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X GET \
http://localhost:8080/rest/script/groovy/load/repository/production/script/groovy/JcrGroovyTest.groovy</programlisting>

    <para>Disable scripts autoloading, NOTE it does not change current
    state:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X GET \
http://localhost:8080/rest/script/groovy/repository/production/script/groovy/JcrGroovyTest.groovy/autoload?state=false</programlisting>

    <para>Enable it again:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X GET \
http://localhost:8080/rest/script/groovy/autoload/repository/production/script/groovy/JcrGroovyTest.groovy?state=true</programlisting>

    <para>and again more simpe variant:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X GET \
http://localhost:8080/rest/script/groovy/autoload/repository/production/script/groovy/JcrGroovyTest.groovy</programlisting>

    <para>Change script source code:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X POST \
-H 'Content-type:script/groovy' \
--data-binary @JcrGroovyTest.groovy \
http://localhost:8080/rest/script/groovy/update/repository/production/script/groovy/JcrGroovyTest.groovy</programlisting>

    <para>This example imitate sending data with HTML form
    ('multipart/form-data').</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X POST \
-F "file=@JcrGroovyTest.groovy;name=test" \
http://localhost:8080/rest/script/groovy/update/repository/production/script/groovy/JcrGroovyTest.groovy</programlisting>

    <para>Remove script from JCR:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X GET \
http://localhost:8080/rest/script/groovy/delete/repository/production/script/groovy/JcrGroovyTest.groovy</programlisting>
  </section>

  <section>
    <title>Get node UUID example</title>

    <para>Now we are going to try simple example of Groovy RESTfull service.
    There is one limitation, even if we use groovy we should use Java style
    code and decline to use dynamic types, but of course we can use it in
    private methods and feilds. Create file JcrGroovyTest.groovy, in this
    example I save it in my home directory /home/andrew/JcrGroovyTest.groovy.
    Then configure GroovyScript2RestLoaderPlugin as described in section Load
    script at startup time.</para>

    <programlisting>import javax.jcr.Node
import javax.jcr.Session
import javax.ws.rs.GET
import javax.ws.rs.Path
import javax.ws.rs.PathParam
import org.exoplatform.services.jcr.RepositoryService
import org.exoplatform.services.jcr.ext.app.ThreadLocalSessionProviderService

@Path("groovy/test/{repository}/{workspace}")
public class JcrGroovyTest {
  private RepositoryService                 repositoryService
  private ThreadLocalSessionProviderService sessionProviderService
  
  public JcrGroovyTest(RepositoryService repositoryService,
                       ThreadLocalSessionProviderService sessionProviderService) {
    this.repositoryService = repositoryService
    this.sessionProviderService = sessionProviderService
  }
  

  @GET
  @Path("{path:.*}")
  public String nodeUUID(@PathParam("repository") String repository,
                         @PathParam("workspace") String workspace,
                         @PathParam("path") String path) {
    Session ses = null
    try {
      ses = sessionProviderService.getSessionProvider(null).getSession(workspace, repositoryService.getRepository(repository))
      Node node = (Node) ses.getItem("/" + path)
      return node.getUUID() + "\n"
    } finally {
      if (ses != null)
        ses.logout()
    }
  }</programlisting>

    <para>After configuration is done start server. If configuration is
    correct and script does not have syntax error you should see next:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/groovy-console1.png" />
      </imageobject>
    </mediaobject>

    <para>In screenshot we can see service deployed.</para>

    <para>First create folder via WebDAV in repository production, folder name
    'test'. Now we can try access this service. Open another console and type
    command:</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
http://localhost:8080/rest/groovy/test/repository/production/test</programlisting>

    <para>Whe you try to execute this command you should have exception,
    because JCR node '/test' is not referenceable and has not UUID. We can try
    add mixin mix:referenceable. To do this add one more method in script.
    Open script from local source code /home/andrew/JcrGroovyTest.groovy, add
    following code and save file.</para>

    <programlisting>@POST
@Path("{path:.*}")
public void addReferenceableMixin(@PathParam("repository") String repository,
                                  @PathParam("workspace") String workspace,
                                  @PathParam("path") String path) {
  Session ses = null
  try {
    ses = sessionProviderService.getSessionProvider(null).getSession(workspace, repositoryService.getRepository(repository))
    Node node = (Node) ses.getItem("/" + path)
    node.addMixin("mix:referenceable")
    ses.save()
  } finally {
    if (ses != null)
      ses.logout()
  }
}</programlisting>

    <para>Now we can try to change script deployed on the server without
    server restart. Type in console next command:</para>

    <programlisting>andrew@ossl:~&gt; curl -i -v -u root:exo \
-X POST \
--data-binary @JcrGroovyTest.groovy \
-H 'Content-type:script/groovy' \
http://localhost:8080/rest/script/groovy/update/repository/production/script/groovy/JcrGroovyTest.groovy</programlisting>

    <para>Node '/script/groovy/JcrGroovyTest.groovy' has property
    exo:autoload=true so script will be re-deployed automatically when script
    source code changed.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/groovy-console2.png" />
      </imageobject>
    </mediaobject>

    <para>Script was redeployed, now try access newly created method.</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
-X POST \
http://localhost:8080/rest/groovy/test/repository/production/test</programlisting>

    <para>Method excution should be quiet, without output, traces, etc. Then
    we can try again get node UUID.</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
http://localhost:8080/rest/groovy/test/repository/production/test
1b8c88d37f0000020084433d3af4941f</programlisting>

    <para>Node UUID: 1b8c88d37f0000020084433d3af4941f</para>

    <para>We don't need this scripts any more, so remove it from JCR.</para>

    <programlisting>andrew@ossl:~&gt; curl -u root:exo \
http://localhost:8080/rest/script/groovy/delete/repository/production/script/groovy/JcrGroovyTest.groovy</programlisting>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/groovy-console3.png" />
      </imageobject>
    </mediaobject>
  </section>

  <section>
    <title>Groovy script restrictions</title>

    <para>You should keep one class per one groovy file. The same actually for
    interface and it implementation. It's limitation of groovy parser that
    does not have type Class[] parseClass(InputStream) or Collection
    parseClass(InputStream) but only Class parseClass(InputStream)
    instead.</para>

    <para>That is all.</para>
  </section>

  <section>
    <title>Dependencies resolving</title>

    <para>Since WS version 2.2.0-Beta01 and JCR version 1.14.0-Beta01 there is
    support of script dependency resolving. If Groovy RESTful service use some
    classes from other Groovy scripts they can be loaded when service will be
    deployed. There is special
    org.exoplatform.container.component.ComponentPlugin for this
    (configuration example below).</para>

    <programlisting>&lt;external-component-plugins&gt;
      &lt;target-component&gt;org.exoplatform.services.jcr.ext.script.groovy.GroovyScript2RestLoader&lt;/target-component&gt;
      &lt;component-plugin&gt;
         &lt;name&gt;add groovy repo&lt;/name&gt;
         &lt;set-method&gt;addPlugin&lt;/set-method&gt;
         &lt;type&gt;org.exoplatform.services.jcr.ext.script.groovy.GroovyScriptAddRepoPlugin&lt;/type&gt;
         &lt;init-params&gt;
            &lt;properties-param&gt;
               &lt;name&gt;repo1&lt;/name&gt;
               &lt;property name="repository" value="repository"/&gt;
               &lt;property name="workspace" value="production"/&gt;
               &lt;property name="path" value="/dependencies"/&gt;
            &lt;/properties-param&gt;
         &lt;/init-params&gt;
      &lt;/component-plugin&gt;
   &lt;/external-component-plugins&gt;</programlisting>

    <para>It is possible to add more then one dependencies location, just one
    more "properties-param" should be used.</para>

    <para>When Groovy ClassLoader need load class in will try to load from
    repository "repository", workspace "production" and from folder
    "/dependencies/...". For example, we have simple Groovy RESTful service
    :</para>

    <programlisting>package org.exoplatform.groovy.test

import javax.ws.rs.GET
import javax.ws.rs.Path

import org.exoplatform.groovy.lib.Dependency1

@Path("groovy-test-dependency")
public class TestDependency {
  
  @GET
  def method() {
    return new Dependency1().getName()
  }
  
}</programlisting>

    <para>and other script</para>

    <programlisting>package org.exoplatform.groovy.lib

class Dependency1
{
   String name = getClass().getName()
}</programlisting>

    <para>Script org.exoplatform.groovy.lib.Dependency1 MUST be located with
    respect to package name. So if we make a decision to store dependencies in
    repository "repository", workspace "production" and in folder
    "/dependencies" then full path to org.exoplatform.groovy.lib.Dependency1
    must be /dependencies/org/exoplatform/groovy/lib/Dependency1.groovy. If
    script located as described it will be found automatically when "main"
    service will be deployed.</para>
  </section>

  <section>
    <title>Security</title>

    <para>Since WS version 2.2.0-Beta01 and JCR version 1.14.0-Beta01 it is
    possible to configure permissions of Groovy based RESTful services by
    using special codebase. Let's see how we allow a dynamic (possibly user
    defined) services to execute with limited permissions.</para>

    <para>Add in existed or create new policy file and add next lines in
    it</para>

    <programlisting>grant codeBase "file:/groovy/script/jaxrs" {
};</programlisting>

    <para>In this case groovy services have not any privileges. Detailed list
    of JDK permissions available here <link
    linkend="???">http://java.sun.com/j2se/1.5.0/docs/guide/security/permissions.html#PropertyPermission</link>
    To give all permissions to Groovy services simply add next in policy
    file</para>

    <programlisting>grant codeBase "file:/groovy/script/jaxrs" {
   permission java.security.AllPermission;
};</programlisting>

    <para>NOTE URL file:/groovy/script/jaxrs is virtual and not need be
    present on file system.</para>
  </section>
</chapter>

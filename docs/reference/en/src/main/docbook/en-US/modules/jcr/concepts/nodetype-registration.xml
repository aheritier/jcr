<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="JCR.NodeTypeRegistration">
  <?dbhtml filename="ch-nodetype-registration.html"?>

  <title>NodeType Registration</title>

  <para>eXo JCR implementation supports two ways of Nodetypes
  registration:</para>

  <itemizedlist>
    <listitem>
      <para>From a NodeTypeValue POJO and</para>
    </listitem>

    <listitem>
      <para>from an XML document (stream).</para>
    </listitem>
  </itemizedlist>

  <section>
    <title>Interfaces and methods</title>

    <section>
      <title>ExtendedNodeTypeManager</title>

      <para>The ExtendedNodeTypeManager (from JCR 1.11) interface provides the
      following methods related to registering node types</para>

      <programlisting>public static final int IGNORE_IF_EXISTS  = 0;

public static final int FAIL_IF_EXISTS    = 2;

public static final int REPLACE_IF_EXISTS = 4;


/**
 * Registers node type using value object.
 */
void registerNodeType(NodeTypeValue nodeTypeValue, int alreadyExistsBehaviour) throws RepositoryException;

/**
 * Registers all node types using XML binding value objects from xml stream.
 */
void registerNodeTypes(InputStream xml, int alreadyExistsBehaviour) throws RepositoryException;

/**
 * Return &lt;code&gt;NodeTypeValue&lt;/code&gt; for a given nodetype name. Used for
 * nodetype update. Value can be edited and registered via
 * &lt;code&gt;registerNodeType(NodeTypeValue nodeTypeValue, int alreadyExistsBehaviour)&lt;/code&gt;
 */
NodeTypeValue getNodeTypeValue(String ntName) throws NoSuchNodeTypeException, RepositoryException;

/**
 * Registers or updates the specified &lt;code&gt;Collection&lt;/code&gt; of
 * &lt;code&gt;NodeTypeValue&lt;/code&gt; objects.
 */
public NodeTypeIterator registerNodeTypes(Collection&lt;NodeTypeValue&gt; values,
                                            int alreadyExistsBehaviour) throws UnsupportedRepositoryOperationException,
                                                                       RepositoryException;

/**
 * Unregisters the specified node type.
 */
public void unregisterNodeType(String name) throws UnsupportedRepositoryOperationException,
                                             NoSuchNodeTypeException,
                                             RepositoryException;

/**
 * Unregisters the specified set of node types.&lt;p/&gt; Used to unregister a set
 * of node types with mutual dependencies.
 */
public void unregisterNodeTypes(String[] names) throws UnsupportedRepositoryOperationException,
                                                 NoSuchNodeTypeException,
                                                 RepositoryException;</programlisting>
    </section>

    <section>
      <title>NodeTypeValue</title>

      <para>The NodeTypeValue interface represents a simple container
      structure used to define node types which are then registered through
      the ExtendedNodeTypeManager.registerNodeType method. Implementation of
      this interface doesn't contain any validation logic.</para>

      <programlisting>/**
 * @return Returns the declaredSupertypeNames.
 */
public List&lt;String&gt; getDeclaredSupertypeNames();

/**
 * @param declaredSupertypeNames
 *The declaredSupertypeNames to set.
 */
public void setDeclaredSupertypeNames(List&lt;String&gt; declaredSupertypeNames);

/**
 * @return Returns the mixin.
 */
public boolean isMixin();

/**
 * @param mixin
 *The mixin to set.
 */
public void setMixin(boolean mixin);

/**
 * @return Returns the name.
 */
public String getName();

/**
 * @param name
 *The name to set.
 */
public void setName(String name);

/**
 * @return Returns the orderableChild.
 */
public boolean isOrderableChild();

/**
 * @param orderableChild
 *The orderableChild to set.
 */
public void setOrderableChild(boolean orderableChild);

/**
 * @return Returns the primaryItemName.
 */
public String getPrimaryItemName();

/**
 * @param primaryItemName
 *The primaryItemName to set.
 */
public void setPrimaryItemName(String primaryItemName);

/**
 * @return Returns the declaredChildNodeDefinitionNames.
 */
public List&lt;NodeDefinitionValue&gt; getDeclaredChildNodeDefinitionValues();

/**
 * @param declaredChildNodeDefinitionNames
 *The declaredChildNodeDefinitionNames to set.
 */
public void setDeclaredChildNodeDefinitionValues(List&lt;NodeDefinitionValue&gt; declaredChildNodeDefinitionValues);

/**
 * @return Returns the declaredPropertyDefinitionNames.
 */
public List&lt;PropertyDefinitionValue&gt; getDeclaredPropertyDefinitionValues();

/**
 * @param declaredPropertyDefinitionNames
 *The declaredPropertyDefinitionNames to set.
 */
public void setDeclaredPropertyDefinitionValues(List&lt;PropertyDefinitionValue&gt; declaredPropertyDefinitionValues);</programlisting>
    </section>

    <section>
      <title>NodeDefinitionValue</title>

      <para>The NodeDefinitionValue interface extends ItemDefinitionValue with
      the addition of write methods, enabling the characteristics of a child
      node definition to be set, after which the NodeDefinitionValue is added
      to a NodeTypeValue.</para>

      <programlisting>/**
 * @return Returns the declaredSupertypeNames.
 */
public List&lt;String&gt; getDeclaredSupertypeNames();

/**
 * @param declaredSupertypeNames
 *The declaredSupertypeNames to set.
 */
public void setDeclaredSupertypeNames(List&lt;String&gt; declaredSupertypeNames);

/**
 * @return Returns the mixin.
 */
public boolean isMixin();

/**
 * @param mixin
 *The mixin to set.
 */
public void setMixin(boolean mixin);

/**
 * @return Returns the name.
 */
public String getName();

/**
 * @param name
 *The name to set.
 */
public void setName(String name);

/**
 * @return Returns the orderableChild.
 */
public boolean isOrderableChild();

/**
 * @param orderableChild
 *The orderableChild to set.
 */
public void setOrderableChild(boolean orderableChild);

/**
 * @return Returns the primaryItemName.
 */
public String getPrimaryItemName();

/**
 * @param primaryItemName
 *The primaryItemName to set.
 */
public void setPrimaryItemName(String primaryItemName);

/**
 * @return Returns the declaredChildNodeDefinitionNames.
 */
public List&lt;NodeDefinitionValue&gt; getDeclaredChildNodeDefinitionValues();

/**
 * @param declaredChildNodeDefinitionNames
 *The declaredChildNodeDefinitionNames to set.
 */
public void setDeclaredChildNodeDefinitionValues(List&lt;NodeDefinitionValue&gt; declaredChildNodeDefinitionValues);

/**
 * @return Returns the declaredPropertyDefinitionNames.
 */
public List&lt;PropertyDefinitionValue&gt; getDeclaredPropertyDefinitionValues();

/**
 * @param declaredPropertyDefinitionNames
 *The declaredPropertyDefinitionNames to set.
 */
public void setDeclaredPropertyDefinitionValues(List&lt;PropertyDefinitionValue&gt; declaredPropertyDefinitionValues);

</programlisting>
    </section>

    <section>
      <title>PropertyDefinitionValue</title>

      <para>The PropertyDefinitionValue interface extends ItemDefinitionValue
      with the addition of write methods, enabling the characteristics of a
      child property definition to be set, after which the
      PropertyDefinitionValue is added to a NodeTypeValue.</para>

      <programlisting>/**
 * @return Returns the defaultValues.
 */
public List&lt;String&gt; getDefaultValueStrings();

/**
 * @param defaultValues The defaultValues to set.
 */
public void setDefaultValueStrings(List&lt;String&gt; defaultValues);

/**
 * @return Returns the multiple.
 */
public boolean isMultiple();

/**
 * @param multiple The multiple to set.
 */
public void setMultiple(boolean multiple);

/**
 * @return Returns the requiredType.
 */
public int getRequiredType();

/**
 * @param requiredType The requiredType to set.
 */
public void setRequiredType(int requiredType);

/**
 * @return Returns the valueConstraints.
 */
public List&lt;String&gt; getValueConstraints();

/**
 * @param valueConstraints The valueConstraints to set.
 */
public void setValueConstraints(List&lt;String&gt; valueConstraints);</programlisting>
    </section>

    <section>
      <title>ItemDefinitionValue</title>

      <programlisting> /**
 * @return Returns the autoCreate.
 */
public boolean isAutoCreate();

/**
 * @param autoCreate The autoCreate to set.
 */
public void setAutoCreate(boolean autoCreate);

/**
 * @return Returns the mandatory.
 */
public boolean isMandatory();

/**
 * @param mandatory The mandatory to set.
 */
public void setMandatory(boolean mandatory);

/**
 * @return Returns the name.
 */
public String getName();

/**
 * @param name The name to set.
 */
public void setName(String name);

/**
 * @return Returns the onVersion.
 */
public int getOnVersion();

/**
 * @param onVersion The onVersion to set.
 */
public void setOnVersion(int onVersion);

/**
 * @return Returns the readOnly.
 */
public boolean isReadOnly();

/**
 * @param readOnly The readOnly to set.
 */
public void setReadOnly(boolean readOnly);</programlisting>
    </section>
  </section>

  <section>
    <title>Node type registration</title>

    <para>eXo JCR implementation supports various methods of the node-type
    registration. </para>

    <section>
      <title>Run time registration from xml file.</title>

      <programlisting>ExtendedNodeTypeManager nodeTypeManager = (ExtendedNodeTypeManager) session.getWorkspace()
                                                             .getNodeTypeManager();
InputStream is = MyClass.class.getResourceAsStream("mynodetypes.xml");
nodeTypeManager.registerNodeTypes(is,ExtendedNodeTypeManager.IGNORE_IF_EXISTS );</programlisting>
    </section>

    <section>
      <title>Run time registration using NodeTypeValue.</title>

      <programlisting>ExtendedNodeTypeManager nodeTypeManager = (ExtendedNodeTypeManager) session.getWorkspace()
                                                             .getNodeTypeManager();
NodeTypeValue testNValue = new NodeTypeValue();

List&lt;String&gt; superType = new ArrayList&lt;String&gt;();
superType.add("nt:base");
testNValue.setName("exo:myNodeType");
testNValue.setPrimaryItemName("");
testNValue.setDeclaredSupertypeNames(superType);
List&lt;PropertyDefinitionValue&gt; props = new ArrayList&lt;PropertyDefinitionValue&gt;();
props.add(new PropertyDefinitionValue("*",
                                      false,
                                      false,
                                      1,
                                      false,
                                      new ArrayList&lt;String&gt;(),
                                      false,
                                      0,
                                      new ArrayList&lt;String&gt;()));
testNValue.setDeclaredPropertyDefinitionValues(props);

nodeTypeManager.registerNodeType(testNValue, ExtendedNodeTypeManager.FAIL_IF_EXISTS);</programlisting>
    </section>
  </section>

  <section>
    <title>Change existing node type</title>

    <para>If you want to replace existing node type definition you should pass
    ExtendedNodeTypeManager.REPLACE_IF_EXISTS as a second parameter for the
    method ExtendedNodeTypeManager.registerNodeType.</para>

    <programlisting>ExtendedNodeTypeManager nodeTypeManager = (ExtendedNodeTypeManager) session.getWorkspace()
                                                                           .getNodeTypeManager();
InputStream is = MyClass.class.getResourceAsStream("mynodetypes.xml");
.....
nodeTypeManager.registerNodeTypes(is,ExtendedNodeTypeManager.REPLACE_IF_EXISTS );</programlisting>
  </section>

  <section>
    <title>Remove node type</title>

    <note>
      <para>Removing node type is only possible when repository doesn't
      contains nodes of this type</para>
    </note>

    <programlisting>nodeTypeManager.unregisterNodeType("myNodeType");</programlisting>
  </section>

  <section>
    <title>Practical How to</title>

    <section>
      <title>Add new PropertyDefinition</title>

      <programlisting>
NodeTypeValue myNodeTypeValue = nodeTypeManager.getNodeTypeValue(myNodeTypeName);
List&lt;PropertyDefinitionValue&gt; props = new ArrayList&lt;PropertyDefinitionValue&gt;();
props.add(new PropertyDefinitionValue("tt",
                                      true,
                                      true,
                                      1,
                                      false,
                                      new ArrayList&lt;String&gt;(),
                                      false,
                                      PropertyType.STRING,
                                      new ArrayList&lt;String&gt;()));
myNodeTypeValue.setDeclaredPropertyDefinitionValues(props);

nodeTypeManager.registerNodeType(myNodeTypeValue, ExtendedNodeTypeManager.REPLACE_IF_EXISTS);</programlisting>
    </section>

    <section>
      <title>Add new child NodeDefinition</title>

      <programlisting>NodeTypeValue myNodeTypeValue = nodeTypeManager.getNodeTypeValue(myNodeTypeName);

List&lt;NodeDefinitionValue&gt; nodes = new ArrayList&lt;NodeDefinitionValue&gt;();
nodes.add(new NodeDefinitionValue("child",
                                      false,
                                      false,
                                      1,
                                      false,
                                      "nt:base",
                                      new ArrayList&lt;String&gt;(),
                                      false));
testNValue.setDeclaredChildNodeDefinitionValues(nodes);

nodeTypeManager.registerNodeType(myNodeTypeValue, ExtendedNodeTypeManager.REPLACE_IF_EXISTS);</programlisting>
    </section>

    <section>
      <title>Change or removing existing PropertyDefinition or child
      NodeDefinition</title>

      <para>The main note what you should remember before changing or removing
      existing definition is <emphasis role="bold">consistency of the existing
      data</emphasis>. JCR <emphasis role="bold">do not allow</emphasis> you
      to change the node type in that way in which the the existing data would
      be incompatible with new node type. But if these changes are needed, you
      can do it in several phases, consistently changing the node type and the
      existing data.</para>

      <para>Example</para>

      <para>Add new residual property definition with name "downloadCount" to
      the existing node type "myNodeType".</para>

      <para>There are two limitations that do not allow us to made the task
      with single call of registerNodeType method.</para>

      <itemizedlist>
        <listitem>
          <para>Existing nodes of the type "myNodeType", wich does not contain
          properties "downloadCount" that conflicts with node type what we
          need.</para>
        </listitem>

        <listitem>
          <para>Registered node type "myNodeType" will not allow us to add
          properties "downloadCount" because it has no such specific
          properties.</para>
        </listitem>
      </itemizedlist>

      <para>To complete the task we need to make 3 steps</para>

      <itemizedlist>
        <listitem>
          <para>We change the existing node type "myNodeType" by adding not
          mandatory property "downloadCount".</para>
        </listitem>

        <listitem>
          <para>We add to all existing nodes of the node type "myNodeType"
          property "downloadCount".</para>
        </listitem>

        <listitem>
          <para>We change definition of the property "downloadCount" of the
          node type "myNodeType" to mandatory.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Changing list of super types</title>

      <programlisting>NodeTypeValue testNValue = nodeTypeManager.getNodeTypeValue("exo:myNodeType");

List&lt;String&gt; superType  = testNValue.getDeclaredSupertypeNames();
superType.add("mix:versionable");
testNValue.setDeclaredSupertypeNames(superType);

nodeTypeManager.registerNodeType(testNValue, ExtendedNodeTypeManager.REPLACE_IF_EXISTS);</programlisting>
    </section>
  </section>
</chapter>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <?dbhtml filename="ch-ws.html"?>

  <title>REST Migration to jsr311</title>

  <important>
    <para>The new implementation of the REST engine respects the jsr311
    specification.</para>
  </important>

  <section>
    <title>REST service structure:</title>

    <itemizedlist>
      <listitem>
        <para>REST service must be represented by Java class that has @Path
        annotation, it calls <command>root resource</command>. In some cases
        class may have not @Path, about this classes see in Sub-Resource
        Locators section. Root resource class may contain <command>Resource
        Methods</command>, <command>Sub-Resource Methods</command> and
        <command>Sub-Resource Locators</command>. Root resource MUST contain
        at least one of it. </para>

        <para>1. <command>Resource Method</command> it is method that contains
        HTTP method annotation, e.g. @GET, @POST, etc. and it does not contain
        @Path annotation. </para>

        <para>2. <command>Sub-Resource Method</command> it is method that
        contains HTTP method annotation and @Path annotation. Sub-Resource
        Locator it is method that does not contain HTTP method annotation but
        contains @Path annotation. </para>

        <para>3. <command>Sub-Resource Locator </command>can't process request
        directly but it can produce Object (Resource) and that object can
        process request or has <command>Sub-Resource Locator</command> that
        can produce other Resource.Other important part @Consumes and
        @Produces annotations. These annotations can be used at classes and
        methods. Annotation on method override annotation on class.</para>
      </listitem>

      <listitem>
        <para>Annotated method parameters @PathParam, @QueryParam, @FormParam,
        @HeaderParam, @Matrix, @CookieParam, @Context annotation must be
        (Description of this annotation in jsr311 specification or jsr311-api
        javadoc): </para>

        <para>1. String </para>

        <para>2. Primitive type, except char </para>

        <para>3. Has constructor with single string arguments </para>

        <para>4. Has static valueOf method with single string argument </para>

        <para>5. Be List, Set or SortedSet with items described in first four
        points</para>
      </listitem>

      <listitem>
        <para>Not annotated method parameter or <command>Entity
        Parameter</command>. </para>

        <para>1. Must be not more then one </para>

        <para>2. <command>Sub-Resource Locator</command> MUST NOT have
        <command>Entity Parameter</command>. </para>

        <para>3. If <command>Resource Method</command> or
        <command>Sub-Resource Method</command> contains at least one parameter
        with @FormParam annotation then <command>Entity Parameter</command>
        MUST be MultivaluedMap&lt;String, String&gt; only.</para>
      </listitem>

      <listitem>
        <para>Method return type. Resource method (<command>Resource
        Method</command> or <command>Sub-Resource Method</command>) may return
        void,javax.ws.rs.core.Response,javax.ws.rs.core.GenericEntity or other
        Java type. If void type returned ot returned object is null then 204
        HTTP status will be set for response otherwise 200 status will be
        used. With javax.ws.rs.core.Response response can be set by service
        developer.</para>
      </listitem>

      <listitem>
        <para>Reading/Writing Entity done via
        <command>EntityProvider</command>. Each
        <command>EntityProvider</command> can require precise preset media
        type of entity, for example JsonEntityProvider require 'Content-Type'
        and/or 'Accept' header set as application/json. REST engine supports
        next entity provider:</para>

        <table>
          <title></title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center">Provider class</entry>

                <entry align="center">Media Type</entry>

                <entry align="center">Java Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ByteEntityProvider</entry>

                <entry>*/*</entry>

                <entry>byte[]</entry>
              </row>

              <row>
                <entry>DataSourceEntityProvider</entry>

                <entry>*/*</entry>

                <entry>javax.activation.DataSource</entry>
              </row>

              <row>
                <entry>DOMSourceEntityProvider</entry>

                <entry>application/xml,application/xhtml+xml,text/xml</entry>

                <entry>javax.xml.transform.dom.DOMSource</entry>
              </row>

              <row>
                <entry>FileEntityProvider</entry>

                <entry>*/*</entry>

                <entry>java.io.File</entry>
              </row>

              <row>
                <entry>MultivaluedMapEntityProvider</entry>

                <entry>application/x-www-form-urlencoded</entry>

                <entry>MultivaluedMap&lt;String, String&gt;</entry>
              </row>

              <row>
                <entry>MultipartFormDataEntityProvider</entry>

                <entry>multipart/*</entry>

                <entry>java.util.Iterator&lt;org.apache.commons.fileupload.FileItem&gt;</entry>
              </row>

              <row>
                <entry>InputStreamEntityProvider</entry>

                <entry>*/*</entry>

                <entry>java.io.InputStream</entry>
              </row>

              <row>
                <entry>ReaderEntityProvider</entry>

                <entry>*/*</entry>

                <entry>java.io.Reader</entry>
              </row>

              <row>
                <entry>SAXSourceEntityProvider</entry>

                <entry>application/xml,application/xhtml+xml,text/xml</entry>

                <entry>javax.xml.transform.sax.SAXSource</entry>
              </row>

              <row>
                <entry>StreamSourceEntityProvider</entry>

                <entry>application/xml,application/xhtml+xml,text/xml</entry>

                <entry>javax.xml.transform.stream.StreamSource</entry>
              </row>

              <row>
                <entry>StringEntityProvider</entry>

                <entry>*/*</entry>

                <entry>java.lang.String</entry>
              </row>

              <row>
                <entry>StreamOutputEntityProvider</entry>

                <entry>*/*</entry>

                <entry>NOTE for writing data only</entry>
              </row>

              <row>
                <entry>JsonEntityProvider</entry>

                <entry>application/json</entry>

                <entry>Object (simple constructor, get/set methods)</entry>
              </row>

              <row>
                <entry>JAXBElementEntityProvider</entry>

                <entry>application/xml,application/xhtml+xml,text/xml</entry>

                <entry>javax.xml.bind.JAXBElement</entry>
              </row>

              <row>
                <entry>JAXBObjectEntityProvider</entry>

                <entry>application/xml,application/xhtml+xml,text/xml</entry>

                <entry>Object (simple constructor, get/set methods)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Migration Examples</title>

    <para>EXAMPLE #1</para>

    <para><command>Old code</command></para>

    <programlisting>package org.exoplatform.services.rest.example;

import org.exoplatform.services.rest.HTTPMethod;
import org.exoplatform.services.rest.URITemplate;
import org.exoplatform.services.rest.URIParam;
import org.exoplatform.services.rest.container.ResourceContainer;
import org.exoplatform.services.rest.transformer.StringOutputTransformer;
import org.exoplatform.services.rest.OutputTransformer;
import org.exoplatform.services.rest.Response;

@URITemplate("/a/{1}/b")
public class Resource implements ResourceContainer {

  @HTTPMethod("GET")
  @URITemplate("{2}")
  @OutputTransformer(StringOutputTransformer.class)
  public Response m0(@URIParam("1") String param1, @URIParam("2") String param2) {
    Response resp = Response.Builder.ok(param1+param2, "text/plain").build();
    return resp;
  }
}</programlisting>

    <para><command>New code</command></para>

    <programlisting>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam

@Path("/a/{1}/b")
public class Resource implements ResourceContainer {
  @GET
  @Path("{2}")
  @Produces("text/plain")
  public String m0(@PathParam("1") String param1, @PathParam("2") String param2) {
    return path1+path2;
  }
}</programlisting>

    <para>EXAMPLE #2</para>

    <para><command>Old code</command></para>

    <programlisting>import org.exoplatform.services.rest.HTTPMethod;
import org.exoplatform.services.rest.InputTransformer;
import org.exoplatform.services.rest.Response;
import org.exoplatform.services.rest.URITemplate;
import org.exoplatform.services.rest.container.ResourceContainer;
import org.exoplatform.ws.frameworks.json.transformer.Json2BeanInputTransformer;

public class Resource implements ResourceContainer {
  @HTTPMethod("POST")
  @URITemplate("/")
  @InputTransformer(Json2BeanInputTransformer.class)
  public Response m0(Book book) {
    // do something with bean
    return Response.Builder.noContent().build();  
  }
}</programlisting>

    <para><command>New code</command></para>

    <programlisting>import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Consumes;

@Path("/")
public class Resource implements ResourceContainer {
  @POST
  @Consumes("application/json")
  public void m0(Book book) {
    // do something with bean
  }
}</programlisting>
  </section>

  <section>
    <title>Support for javax.ws.rs.core.Application</title>

    <para>Since version exo-ws-2.0.1 add support for class
    javax.ws.rs.core.Application. It gives possibility to setup services and
    provider life-cycle to singleton or per-request mode. For details see
    JAX-RS specification, chapter 2. Subclass of Application should be
    configured as component of exo-container.</para>
  </section>
</chapter>

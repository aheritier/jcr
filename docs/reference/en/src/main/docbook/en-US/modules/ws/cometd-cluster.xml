<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id = "WS.Cometdcluster">
  <?dbhtml filename="ch-cometd-cluster.html"?>

  <title>Cometd cluster</title>

  <section>
    <title>Motivation</title>

    <para>When we run Stress Testing Cometd (Jetty implementation) <link
    linkend="???">http://docs.codehaus.org/display/JETTY/Stress+Testing+Cometd</link>
    we see that if we connect many clients, deliver message latency tends to
    grow up. This situation described in article "20,000 Reasons Why Comet
    Scales". <link
    linkend="???">http://cometdaily.com/2008/01/07/20000-reasons-that-comet-scales/</link>
    So, in order to support a lot of concurrent cometd connections we need a
    mean to horizontally scale eXo cometd support.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/cometd-cluster.png" />
      </imageobject>
    </mediaobject>

    <para>1- Getting base URL for cometd connection (one of the node in cometd
    cluster)</para>

    <para>2 - Getting userToken at cometd server (it need for subscribing on
    channel)</para>

    <para>3 - Sending message from Exo-server</para>

    <para>LoadBalancer - component that give base URL of one of free cometd
    server.</para>

    <para>ContinuationServiceDelegate - component that send message from
    Exo-server to client via cometd server there client is registered</para>

    <para>RESTContinuationService - component that receive message from
    ContinuationServiceDelegate and delegate it to ContinuationServer and send
    userToken generated by ContinuationServer for user.</para>

    <para>ContinuationService - component that provide cometd
    connection.</para>
  </section>

  <section>
    <title>How it works</title>

    <para>To start work with cometd service the client should send request to
    Exo-server with the username, receive with response URL one of cometd
    servers (1 - on the scheme). This URL gives out LoadBalancer using the
    information set in a configuration</para>

    <programlisting>&lt;init-params&gt;
  &lt;object-param&gt;
  &lt;name&gt;cometd.lb.configuration&lt;/name&gt;
  &lt;description&gt;cometd lb nodes&lt;/description&gt;
  &lt;object type="org.exoplatform.ws.frameworks.cometd.loadbalancer.LoadBalancerImpl$LoadBalancerConf"&gt;
   &lt;field name="nodes"&gt;
    &lt;collection type="java.util.ArrayList"&gt;
     &lt;value&gt;
      &lt;object type="org.exoplatform.ws.frameworks.cometd.loadbalancer.Node"&gt;
       &lt;field name="id"&gt;
        &lt;string&gt;1&lt;/string&gt;
       &lt;/field&gt;
       &lt;field name="url"&gt;
        &lt;string&gt;http://localhost:8080&lt;/string&gt;
       &lt;/field&gt;
       &lt;field name="maxConnection"&gt;
        &lt;int&gt;10&lt;/int&gt;
       &lt;/field&gt;
      &lt;/object&gt;
     &lt;/value&gt;
     &lt;value&gt;
      &lt;object type="org.exoplatform.ws.frameworks.cometd.loadbalancer.Node"&gt;
       &lt;field name="id"&gt;
        &lt;string&gt;2&lt;/string&gt;
       &lt;/field&gt;
       &lt;field name="url"&gt;
        &lt;string&gt;http://localhost:8081&lt;/string&gt;
       &lt;/field&gt;
       &lt;field name="maxConnection"&gt;
        &lt;int&gt;15&lt;/int&gt;
       &lt;/field&gt;
      &lt;/object&gt;
     &lt;/value&gt;
    &lt;/collection&gt;
   &lt;/field&gt;
  &lt;/object&gt;
 &lt;/object-param&gt;
&lt;/init-params&gt;</programlisting>

    <para>In the above configuration we described two cometd-cluseter nodes
    of. Let's consider one of them.</para>

    <para>1 - are unique the identifier of node (id) http://localhost:8080 -
    base URL 15 - the maximum number of the connected clients. LoadBalancer
    chooses one of node in cometd cluster (on which connection is possible)
    and associate with a name of the user! Now the client know on that cometd
    server connection is possible, for this purpose it is necessary to request
    userToken on cometd server(2). As for this need do request on other domain
    client must use framework that allowed cross-domain-ajax. We have
    framework that can do this task, how use this framework describe in
    article - Framework for cross-domain AJAX. After client receive userToken
    the client can do cometd-registration.</para>

    <para>Example: the Client with a name exo1 wishes to be connected to
    cometd to service. It is necessary to make HTTP request (GET) on
    Exo-server URL = "http://localhost:8080/rest/cometdurl/exo1" with the
    answer receives a base URL of cometd server, it can be as a remote server
    or local. We will assume that we use cluster and receive some thing like
    this "http://192.168.0.21:8080". Further it is necessary get userToken
    already from cometd server for this purpose do request (GET) URL
    ="http://192.168.0.22:8081/rest/gettoken/exo1", after that we do standard
    procedure for cometd connections.</para>

    <para>Then it is necessary to send the message to client
    ContinuationServiceDelegate requests at LoadBalancer the cometd server
    address on which the client is registered sends the message in format JSON
    on cometd server should be RESTContinuationService which to accept the
    message and to transfer them to ContinuationService (3)</para>

    <para>Example: we will want to send the message to the client exo1. For
    this purpose ContinuationServiceDelegate requests to LoadBalancer the
    information on that to what server the given user is connected, we will
    receive necessary URL http://192.168.0.22:8081) and do HTTP request (POST)
    on comets a server, URL =
    "http://192.168.0.22:8080/rest/sendprivatemessage/" in a body the message
    in format JSON is transferred, RESTContinuationService having received the
    given message transfers it ContinuationService which already in turn
    delivers it to the client.</para>

    <programlisting>&lt;configuration&gt;
 &lt;component&gt;
  &lt;type&gt;org.exoplatform.ws.frameworks.cometd.ContinuationService&lt;/type&gt;
 &lt;/component&gt;
 &lt;component&gt;
  &lt;key&gt;org.mortbay.cometd.continuation.AbstractBayeux&lt;/key&gt;
  &lt;type&gt;org.mortbay.cometd.continuation.EXoContinuationBayeux&lt;/type&gt;
 &lt;/component&gt;
 &lt;component&gt;
  &lt;key&gt;org.exoplatform.ws.frameworks.cometd.transport.ContinuationServiceDelegate&lt;/key&gt;
  &lt;type&gt;org.exoplatform.ws.frameworks.cometd.transport.ContinuationServiceRemoteDelegate&lt;/type&gt;
 &lt;/component&gt;
 &lt;component&gt;
  &lt;type&gt;org.exoplatform.ws.frameworks.cometd.transport.RESTContinuationService&lt;/type&gt;
 &lt;/component&gt;
 &lt;component&gt;
  &lt;type&gt;org.exoplatform.ws.frameworks.cometd.loadbalancer.RESTLoadBalancerService&lt;/type&gt;
 &lt;/component&gt;
 &lt;component&gt; 
  &lt;key&gt;org.exoplatform.ws.frameworks.cometd.loadbalancer.LoadBalancer&lt;/key&gt;
  &lt;type&gt;org.exoplatform.ws.frameworks.cometd.loadbalancer.LoadBalancerImpl&lt;/type&gt;
  &lt;init-params&gt;
  &lt;object-param&gt;
  &lt;name&gt;cometd.lb.configuration&lt;/name&gt;
  &lt;description&gt;cometd lb nodes&lt;/description&gt;
  &lt;object type="org.exoplatform.ws.frameworks.cometd.loadbalancer.LoadBalancerImpl$LoadBalancerConf"&gt;
   &lt;field name="nodes"&gt;
    &lt;collection type="java.util.ArrayList"&gt;
     &lt;value&gt;
      &lt;object type="org.exoplatform.ws.frameworks.cometd.loadbalancer.Node"&gt;
       &lt;field name="id"&gt;
        &lt;string&gt;1&lt;/string&gt;
       &lt;/field&gt;
       &lt;field name="url"&gt;
        &lt;string&gt;http://localhost:8080&lt;/string&gt;
       &lt;/field&gt;
       &lt;field name="maxConnection"&gt;
        &lt;int&gt;10&lt;/int&gt;
       &lt;/field&gt;
      &lt;/object&gt;
     &lt;/value&gt;
     &lt;value&gt;
      &lt;object type="org.exoplatform.ws.frameworks.cometd.loadbalancer.Node"&gt;
       &lt;field name="id"&gt;
        &lt;string&gt;2&lt;/string&gt;
       &lt;/field&gt;
       &lt;field name="url"&gt;
        &lt;string&gt;http://localhost:8081&lt;/string&gt;
       &lt;/field&gt;
       &lt;field name="maxConnection"&gt;
        &lt;int&gt;15&lt;/int&gt;
       &lt;/field&gt;
      &lt;/object&gt;
     &lt;/value&gt;
    &lt;/collection&gt;
   &lt;/field&gt;
  &lt;/object&gt;
 &lt;/object-param&gt;
&lt;/init-params&gt;
 &lt;/component&gt;
&lt;/configuration&gt;</programlisting>

    <para>The test: At testing running two servlet-containers Tomcat (in role
    Exo - server'a) and Jetty (cometd server). A configuration example:</para>

    <programlisting>&lt;configuration clients="12" repeat="1" sleep-connection="500" sleep-sending="200"&gt;
  &lt;container containerStart="false" port="8080" home=""/&gt;
  &lt;messages&gt;
    &lt;message broadcast="false" id="1"&gt;hello&lt;/message&gt;
    &lt;message broadcast="true" id="2"&gt;hello!!!&lt;/message&gt;
  &lt;/messages&gt;
  &lt;cometd-url&gt;http://localhost:8080/cometd/cometd&lt;/cometd-url&gt;
  &lt;base-url&gt;http://localhost:8080/rest/&lt;/base-url&gt;
  &lt;channels&gt;
    &lt;channel&gt;/eXo/comedt/test&lt;/channel&gt;
  &lt;/channels&gt;
&lt;/configuration&gt;</programlisting>

    <para>configuration describe that we create 12 cometd connections with
    sleep-connection = "500" (мс), will be subscribe on the channel
    "/eXo/comedt/test". Then it will be sent two message "hello" "hello!!!"
    the First individually to each of the clients, the second broadcast on the
    channel. Messages delivered with an interval sleep-sending = "200". <link
    linkend="???">http://localhost:8080/rest/</link> - base URL of Exo -
    server. For start test execute a command:</para>

    <programlisting>mvn clean install -f pom-test.xml -Dexo.test.skip=false -Djetty.home = "./target/jetty"</programlisting>
  </section>

  <section>
    <title>Bench</title>

    <para>See Cometd Cluster Bench</para>
  </section>
</chapter>

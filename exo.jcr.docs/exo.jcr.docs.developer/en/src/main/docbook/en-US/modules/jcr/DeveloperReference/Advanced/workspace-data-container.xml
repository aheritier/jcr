<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
        "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<section id="JCR.DeveloperReference.Advanced.WorkspaceDataContainer" role="NotInToc">
  <title>Workspace Data Container</title>
  <para>Before going through Workspace Data Container, you need to learn about the following concepts:</para>

 <para xml:id="JCR.Architecture.Concepts.ContainerAndConnection">
      <citetitle>
        <emphasis role="bold">Container and connection</emphasis>
      </citetitle>
    </para>

      <para>Workspace Data Container (container) serves Repository Workspace
      persistent storage. WorkspacePersistentDataManager (data manager) uses
      container to perform CRUD operation on the persistent storage. Accessing
      to the storage in the data manager is implemented via storage connection
      obtained from the container (WorkspaceDataContainer interface
      implementation). Each connection represents a transaction on the
      storage. Storage Connection (connection) should be an implementation of
      WorkspaceStorageConnection.</para>

      <itemizedlist>
        <listitem>
          <para>Container acts as a factory of a new storage connections.
          Usually, this method is designed to be synchronized to avoid
          possible concurrent issues.</para>
        </listitem>
      </itemizedlist>

      <programlisting language="java">WorkspaceStorageConnection openConnection() throws RepositoryException;
</programlisting>

      <itemizedlist>
        <listitem>
          <para>Open read-only WorkspaceStorageConnection. Read-only
          connections can be potentially a bit faster in some cases.</para>
        </listitem>
      </itemizedlist>

      <programlisting language="java">WorkspaceStorageConnection openConnection(boolean readOnly) throws RepositoryException;
</programlisting>

      <note>
        <title>*EXPERIMENTAL*</title>

        <para>Read-only WorkspaceStorageConnection is experimental feature and
        not currently handled in JCR. Actually, such connections didn't prove
        their performance, so JCR Core doesn't use them.</para>
      </note>

      <itemizedlist>
        <listitem>
          <para>Storage connection might also be reused. This means reuse of
          physical resource (e.g. JDBC Connection) allocated by one connection
          in another. This feature is used in a data manager for saving
          ordinary and system changes on the system Workspace. But the reuse
          is an optional feature and it can work, otherwise a new connection
          will open.</para>
        </listitem>
      </itemizedlist>

      <programlisting language="java">WorkspaceStorageConnection reuseConnection(WorkspaceStorageConnection original) throws RepositoryException;
</programlisting>

      <itemizedlist>
        <listitem>
          <para>When checking Same-Name Siblings (SNS) existence, JCR Core can
          use new connection or not. This is defined via Workspace Data
          Container configuration and retrieved by using a special
          method.</para>
        </listitem>
      </itemizedlist>

      <programlisting language="java">boolean isCheckSNSNewConnection();
</programlisting>

      <para>Container initialization is only based on a configuration. After
      the container has been created, it's not possible to change parameters.
      Configuration consists of implementation class and set of properties and
      Value Storages configuration.</para>

    <para xml:id="JCR.Architecture.Concepts.ValueStorages">
      <citetitle>
        <emphasis role="bold">Value storages</emphasis>
      </citetitle>
    </para>

    <para>Container provides optional special mechanism for Value storing.
      It's possible to configure external Value Storages via container
      configuration (available only via configuration). Value Storage works as
      fully independent pluggable storage. All required parameters storage
      obtains from its configuration. Some storages are possible for one
      container. Configuration describes such parameters as
      ValueStoragePluginimplementation class, set of implementation specific
      properties and filters. The filters declares criteria for Value matching
      to the storage. Only matched Property Values will be stored. So, in
      common case, the storage might contains only the part of the Workspace
      content. Value Storages are very useful for BLOB storing. E.g. storing
      on the File System instead of a database.</para>

      <para>Container obtains Values Storages from ValueStoragePluginProvider
      component. Provider acts as a factory of Value channels
      (ValueIOChannel). Channel provides all CRUD operation for Value Storage
      respecting the transaction manner of work (how it can be possible due to
      implementation specifics of the storages).</para>

    <para xml:id="JCR.Architecture.Concepts.Lifecycle">
      <citetitle>
        <emphasis role="bold">Lifecycle</emphasis>
      </citetitle>
    </para>

      <para>Container is used for read and write operations by data manager.
      Read operations (getters) uses connection once and close it on the
      finally. Write operations performs in commit method as a sequence of
      creating/ updating calls and final commit (or rollback on error). Writes
      uses one connection (or two - another for system workspace) per commit
      call. One connection guaranties transaction support for write
      operations. Commit or rollback should free/clean all resources consumed
      by the container (connection).</para>

    <para xml:id="JCR.Architecture.Concepts.ValueStorageLifecycle">
      <citetitle>
        <emphasis role="bold">Value storage lifecycle</emphasis>
      </citetitle>
    </para>

      <para>Value storage is used from the container inside. Reads are related
      to a container reads. Writes are commit-related. Container (connection)
      implementation should use transaction capabilities of the storages in
      the same way as for other operations.</para>
  <xi:include href="worksapce/data-container-requirements.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
  <xi:include href="worksapce/data-container-ValueStoragesAPI.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
  <xi:include href="worksapce/data-container-howto.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
</section>


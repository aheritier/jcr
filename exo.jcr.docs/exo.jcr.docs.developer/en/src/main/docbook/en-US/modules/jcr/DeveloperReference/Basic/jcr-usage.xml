<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!--3.1.1. Use JCR-->
<section id="JCR.UsingJCR" role="NotInToc">
  <title>Using JCR</title>

<note xml:id="JCR.UsingJCR.JCRSessionCommonConsiderations">
      <title>JCR Session common considerations</title>
		<itemizedlist>
          <listitem>
            <para>Remember that <parameter>javax.jcr.Session</parameter> is not a thread safe object.
            <emphasis role="bold">Thus, never try to share it between threads</emphasis>.</para>
          </listitem>

          <listitem>
            <para>Do not use <emphasis role="bold">System session</emphasis>
            from the <emphasis role="bold">user</emphasis> related code
            because a system session has <emphasis role="bold">unlimited
            rights</emphasis>. Call <parameter>ManageableRepository.getSystemSession()</parameter>
            from <emphasis role="bold">process</emphasis> related code
            only.</para>
          </listitem>

          <listitem>
            <para>Call <parameter>Session.logout()</parameter> explicitly to <emphasis
            role="bold">release resources</emphasis> assigned to the
            session.</para>
          </listitem>

          <listitem>
            <para>When designing your application, take care of the Session
            policy inside your application. Two <emphasis
            role="bold">strategies</emphasis> are possible: <emphasis
            role="bold">Stateless</emphasis> (Session per business request)
            and <emphasis role="bold">Stateful</emphasis> (Session per User)
            or some mixings.</para>
          </listitem>
        </itemizedlist>
    </note>
	
	<!--3.1.1.1. Obtain repository object-->
    <section id="JCR.UsingJCR.ObtainingRepositoryObject">
      <title>Obtain repository object</title>

      <para>A <parameter>javax.jcr.Repository</parameter> object can be obtained by:</para>
      <itemizedlist>
          <listitem>
            <para>Using the eXo Container "native" mechanism. All repositories
            are kept with a single <parameter>RepositoryService</parameter> component. So it can be
            obtained from eXo Container as described below:</para>
          </listitem>
      </itemizedlist>
            
<programlisting language="java">RepositoryService repositoryService = (RepositoryService) container.getComponentInstanceOfType(RepositoryService.class);
  Repository repository = repositoryService.getRepository("repositoryName");</programlisting>
  
      <itemizedlist>    
          <listitem>
            <para>Using the eXo Container "native" mechanism with a thread
            local saved "current" repository (especially if you plan to use a
            single repository which covers more than 90% of usecases).</para>
          </listitem>
      </itemizedlist>         
            
<programlisting language="java">  // set current repository at initial time
  RepositoryService repositoryService = (RepositoryService) container.getComponentInstanceOfType(RepositoryService.class);
  repositoryService.setCurrentRepositoryName("repositoryName");
  ....
  // retrieve and use this repository
  Repository repository = repositoryService.getCurrentRepository();</programlisting>
          
      <itemizedlist>
          <listitem>
            <para>Using JNDI as specified in <ulink url="http://jcp.org/en/jsr/detail?id=170">JSR-170</ulink>. This way you have to
            configure the reference is as follow. (see eXo <link
            linkend="Kernel.JNDINaming">JNDI Naming configuration</link>).</para>
          </listitem>
      </itemizedlist>      
            
<programlisting language="java">Context ctx = new InitialContext();
  Repository repository =(Repository) ctx.lookup("repositoryName");</programlisting> 
    </section>

  <!--3.1.1.2. JCR application practices-->
  <section id="JCR.UsingJCR.JCRApplicationPractices">
    <title>JCR application practices</title>

    <para xml:id="JCR.UsingJCR.JCRApplicationPractices.SimplifyingManagementMultiworkspaceApplication">
      <citetitle>
        <emphasis role="bold">Simplify the management of a multi-workspace application</emphasis>
      </citetitle>
    </para>
      <para>(one-shot logout for all opened sessions)</para>

      <para>Use <parameter>org.exoplatform.services.jcr.ext.common.SessionProvider</parameter> which
      is responsible for caching/obtaining your JCR Sessions and closing all
      opened sessions at once.</para>

<programlisting language="java">public class SessionProvider {

  /**
   * Creates a SessionProvider for a certain identity
   * @param cred
   */
  public SessionProvider(Credentials cred) 
  
  /**
   * Gets the session from internal cache or creates and caches a new one 
   */
  public Session getSession(String workspaceName, ManageableRepository repository) 
    throws LoginException, NoSuchWorkspaceException, RepositoryException 

  /**
   * Calls a logout() method for all cached sessions
   */
  public void close() 

  /**
   * a Helper for creating a System session provider
   * @return System session
   */
  public static SessionProvider createSystemProvider() 

  /**
   * a Helper for creating an Anonimous session provider
   * @return System session
   */
  public static SessionProvider createAnonimProvider() 

}</programlisting>

      <para>The SessionProvider is a request or user object, depending on your policy. Create it with your application before performing JCR
      operations, then use it to obtain the Sessions and close at the end of an
      application session (request). See the following example:</para>

<programlisting language="groovy">// (1) obtain current javax.jcr.Credentials, for example get it from AuthenticationService
Credentials cred = ....

// (2) create SessionProvider for current user
SessionProvider sessionProvider = new SessionProvider(ConversationState.getCurrent());

// NOTE: for creating an Anonymous or System Session use  the corresponding static SessionProvider.create...() method
// Get appropriate Repository as described in "Obtaining Repository object" section for example
ManageableRepository repository = (ManageableRepository) ctx.lookup("repositoryName");

// get an appropriate workspace's session 
Session session = sessionProvider.getSession("workspaceName", repository);

 .........
// your JCR code
 .........

 // Close the session provider
 sessionProvider.close(); </programlisting>

    <para xml:id="JCR.UsingJCR.JCRApplicationPractices.ReusingSessionProvider">
      <citetitle>
        <emphasis role="bold">Reuse SessionProvider</emphasis>
      </citetitle>
    </para>

      <para>As shown above, creating the SessionProvider involves multiple
      steps and you may not want to repeat them each time you need to get a
      JCR session. To avoid the plumbing code, <parameter>SessionProviderService</parameter> is provided that aims at helping you get a
      <parameter>SessionProvider</parameter> object.</para>

      <para>The <parameter>org.exoplatform.services.jcr.ext.app.SessionProviderService</parameter> interface is defined as follows:</para>

<programlisting language="java">public interface SessionProviderService {
  void setSessionProvider(Object key, SessionProvider sessionProvider);
  SessionProvider getSessionProvider(Object key);
  void removeSessionProvider(Object key);
}</programlisting>

      <para>Using this service is pretty straightforward, the main contract of
      an implemented component is getting a SessionProvider by key. eXo Platform
      provides the following implementation:</para>

      <table>
        <title>SessionProvider implementations</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry>Implementation</entry>

              <entry>Description</entry>

              <entry>Typical Use</entry>
            </row>
          </thead>

          <tbody>
             <row>
              <entry><parameter>org.exoplatform.services.jcr.ext.app.ThreadLocalSessionProviderService</parameter></entry>

              <entry>per-request style: Keep a single <parameter>SessionProvider</parameter> in a static <parameter>ThreadLocal</parameter> variable.</entry>

              <entry>Always use null for the key.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For the implementation, your code should follow the following sequence:</para>

      <itemizedlist>
        <listitem>
          <para>Call <parameter>SessionProviderService.setSessionProvider(Object key, SessionProvider sessionProvider)</parameter> at the beginning of a business
          request for Stateless application or application's session for the Statefull policy.</para>
        </listitem>

        <listitem>
          <para>Call <parameter>SessionProviderService.getSessionProvider(Object key)</parameter> for obtaining a <parameter>SessionProvider</parameter> object.</para>
        </listitem>

        <listitem>
          <para>Call <parameter>SessionProviderService.removeSessionProvider(Object key)</parameter>
          at the end of a business request for Stateless application or
          application's session for the Statefull policy.</para>
        </listitem>
      </itemizedlist>
    </section>
</section>

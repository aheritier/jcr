<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="JCR.SessionLeakDetected" role="NotInToc">
  <title>Session leak detector</title>
  <para xml:id="JCR.SessionLeakDetected.Introduction">The session leak detector is able to help you debug your
    application based on JCR when you suspect that you have a bug related to a wrong usage of JCR sessions. It works by
    creating a queue of weak references to JCR sessions and the queue is periodically cleaned. When a session reference
    is dequeued and is not cleared it is considered as a leaked session. Obviously what matters here is the time by
    which a session is stale known as max age. If the max age is too short, it will suspect that many sessions are
    leaked although they are not. The default max age value is configured at 2 minutes.
  </para>
    
	<itemizedlist>
    <listitem>
      <para xml:id="JCR.SessionLeakDetected.Activation"><emphasis role="bold">Activation</emphasis></para>

      <para>Setting the <parameter>exo.jcr.session.tracking.active</parameter> virtual machine system property to "true" activates the session detector with a default time period of 2 minutes.</para>

      <para>You can set the max age with the
        <parameter>exo.jcr.jcr.session.tracking.maxage</parameter>
        virtual machine system property in seconds. The default value is 120 (2 minutes) if you do not override.
      </para>

      <para>For example, you can do this easily in <command>eXo.sh</command>.</para>
	  <itemizedlist>
		<listitem>
			<para>On Linux/Macs:</para>
			  <programlisting>JCR_SESSION_TRACK="-Dexo.jcr.session.tracking.active=true -Dexo.jcr.jcr.session.tracking.maxage=60"
JAVA_OPTS="$JCR_SESSION_TRACK $JAVA_OPTS $LOG_OPTS $SECURITY_OPTS $EXO_OPTS $EXO_CONFIG_OPTS $REMOTE_DEBUG"
			  </programlisting>
		</listitem>
		<listitem>
			<para>On Windows:</para>
			  <programlisting>set JCR_SESSION_TRACK=-Dexo.jcr.session.tracking.active=true -Dexo.jcr.jcr.session.tracking.maxage=60
set JAVA_OPTS="%JCR_SESSION_TRACK% %JAVA_OPTS% %LOG_OPTS% %SECURITY_OPTS% %EXO_OPTS% %EXO_CONFIG_OPTS% %REMOTE_DEBUG%"
</programlisting>
		</listitem>
	   </itemizedlist>
      <para>Activate the session tracking and configure a maxage of 1 minute. Any JCR session older than 1 minute will cause an alert.</para>
    </listitem>

  <listitem>
    <para xml:id="JCR.SessionLeakDetected.Report"><emphasis role="bold">Report</emphasis></para>

    <para>Each detector execution starts with</para>

    <programlisting>Starting detector task</programlisting>

    <para>and ends with</para>

    <programlisting>Finished detector task</programlisting>

    <para>When a session is considered as leaked, debug information is printed on the console with a stack trace of the code that created the session in order to help you find out where the leaked session was created at runtime.</para>

    <para>For example:</para>

    <programlisting language="java">java.lang.Exception
          at org.exoplatform.services.jcr.impl.core.SessionReference.&lt;init&gt;(SessionReference.java:113)
          at org.exoplatform.services.jcr.impl.core.TrackedXASession.&lt;init&gt;(TrackedXASession.java:32)
          at org.exoplatform.services.jcr.impl.core.SessionFactory.createSession(SessionFactory.java:128)
          at org.exoplatform.services.jcr.impl.core.RepositoryImpl.getSystemSession(RepositoryImpl.java:314)
          at org.exoplatform.services.jcr.impl.core.RepositoryImpl.getSystemSession(RepositoryImpl.java:71)
          at org.exoplatform.services.jcr.ext.common.SessionProvider.getSession(SessionProvider.java:157)
          at org.exoplatform.faq.service.impl.JCRDataStorage.getFAQServiceHome(JCRDataStorage.java:323)
          ...
    </programlisting>
    
    <para>In this Stacktrace, you learn that the <parameter>org.exoplatform.faq.service.impl.JCRDataStorage.getFAQServiceHome</parameter> method has opened a session that seems to be leaked. You need to verify in the code if <parameter>Session.logout()</parameter> is properly called in all cases (calling it in finally clause usually resolves the issue).</para>

  </listitem>
</itemizedlist>
</section>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!--3.2.1.3. JCR API-->
<section id="JCR.APIExtensions">
  <title>JCR API</title>

      <para>eXo JCR implementation offers new extended feature beyond JCR
      specification. Sometimes one JCR Node has hundreds or
      even thousands of child nodes. This situation is highly not recommended
       for content repository data storage, but sometimes it occurs. They can be iterated in a "lazy" manner by giving
      improvement in term of performance and RAM usage.</para>

   <note id="JCR.APIExtensions.Implementation_notices">
      <title>Implementation notices</title>

      <para>Current "lazy" child nodes iterator supports caching, when pages
      are cached atomically in safe and optimized way. Cache is always kept in
      consistent state using invalidation if child list changed. Take in
      account the following difference in <parameter>getNodes</parameter> and <parameter>getNodesLazily</parameter>.
      Specification defined <parameter>getNode</parameter> method reads the whole list of nodes, so
      child items added after invocation will never be in results.
      <parameter>GetNodesLazily</parameter> does not acquire full list of nodes, so child items added
      after iterator creation can be found in result. So <parameter>getNodesLazily</parameter> can
      represent some kind of "real-time" results. But it is highly depend on
      numerous conditions and should not be used as a feature, it more likely
      implementation specific issue typical for "lazy-pattern".</para>
    </note>

	<!--3.2.1.3.1. Usage-->
    <section id="JCR.APIExtensions.API_and_Usage">
      <title>Usage</title>

      <para>Lazy child nodes iteration feature is accessible via the <parameter>rg.exoplatform.services.jcr.core.ExtendedNode</parameter> extended
      interface, the inheritor
      of <parameter>javax.jcr.Node</parameter>. It provides a new single method shown below:</para>

      <programlisting language="java">   /**
    * Returns a NodeIterator over all child Nodes of this Node. Does not include properties 
    * of this Node. If this node has no child nodes, then an empty iterator is returned.
    * 
    * @return A NodeIterator over all child Nodes of this &lt;code&gt;Node&lt;/code&gt;.
    * @throws RepositoryException If an error occurs.
    */
   public NodeIterator getNodesLazily() throws RepositoryException;
</programlisting>

      <para>From the view of end-user or client application, <parameter>getNodesLazily()</parameter>
      works similar to JCR specified <parameter>getNodes()</parameter> returning <parameter>NodeIterator</parameter>. "Lazy"
      iterator supports the same set of features as an ordinary NodeIterator,
      including <parameter>skip()</parameter> and excluding <parameter>remove()</parameter> features. "Lazy" implementation
      performs reading from DB by pages. Each time when it has no more
      elements stored in memory, it reads the next set of items from persistent
      layer. This set is called "page". The <parameter>getNodesLazily</parameter> feature
      fully supports session and transaction changes log, so it is a
      functionally-full analogue of specified <parameter>getNodes()</parameter> operation. Therefore, when
      having a deal with huge list of child nodes, <parameter>getNodes()</parameter> can be simply
      and safely substituted with <parameter>getNodesLazily()</parameter>.</para>

      <para>JCR gives an experimental opportunity to replace all <parameter>getNodes()</parameter>
      invocations with <parameter>getNodesLazily()</parameter> calls. It handles a boolean system
      property named "<parameter>org.exoplatform.jcr.forceUserGetNodesLazily</parameter>" that
      internally replaces one call with another, without any code changes. But
      be sure using it only for development purposes. This feature can be used
      with the top level products using eXo JCR to perform a quick compatibility
      and performance tests without changing any code. This is not recommended
      to be used as a production solution.</para>
    </section>

	<!--3.2.1.3.2. Configuration-->
    <section id="JCR.APIExtensions.Configuration">
      <title>Configuration</title>

      <para>In order to enable this feature, add the
      "<parameter>-Dorg.exoplatform.jcr.forceUserGetNodesLazily=true</parameter>" to the java system
      properties.</para>

      <para>The "lazy" iterator reads the child nodes "page" after "page" into
      the memory. In this context, a "page" is a set of nodes that is read at
      once. The size of the page is by default 100 nodes and can be configured
      though workspace container configuration using the
      "<parameter>lazy-node-iterator-page-size</parameter>" parameter. For example:</para>

      <programlisting language="xml">&lt;container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer"&gt;
   &lt;properties&gt;
      &lt;property name="source-name" value="jdbcjcr" /&gt;
      &lt;property name="multi-db" value="true" /&gt;
      &lt;property name="max-buffer-size" value="200k" /&gt;
      &lt;property name="swap-directory" value="target/temp/swap/ws" /&gt;
      &lt;property name="lazy-node-iterator-page-size" value="50" /&gt;
      ...
   &lt;/properties&gt;</programlisting>

	  <note>
		<para>It is not recommended to configure a large number for the page size.</para>
	  </note>
    </section>

</section>

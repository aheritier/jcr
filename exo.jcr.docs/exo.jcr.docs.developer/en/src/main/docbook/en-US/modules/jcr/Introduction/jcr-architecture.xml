<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<section id="JCRref.Introduction.JCRArchitecture">
  <title>JCR architecture</title>

  <citetitle>
    <para xml:id="JCRref.Introduction.JCRArchitecture.eXoRepositoryService"><emphasis role="bold">eXo Repository Service</emphasis></para>
  </citetitle>
    <para>eXo Repository Service is a standard service and is a registered
    IoC component that can be deployed in some eXo Containers (see <link linkend="JCR.eXoJCRconfiguration.RepositoryConfiguration">Repository configuration</link> for more details). The relationships between components
    are shown in the picture below:</para>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/concepts/exojcr.gif "/>
      </imageobject>
    </mediaobject>
    <para><keycap>eXo Container:</keycap> Some subclasses of <parameter>org.exoplatform.container.ExoContainer</parameter> (usually <parameter>org.exoplatform.container.StandaloneContainer</parameter> or
    <parameter>org.exoplatform.container.PortalContainer</parameter>) that holds a reference to Repository Service.</para>
    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Repository Service:</emphasis> Contain
        information about repositories. eXo JCR is able to manage many
        Repositories.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Repository:</emphasis> Implementation of <parameter>javax.jcr.Repository</parameter>. It holds references to one or more
        Workspace(s).</para>
      </listitem>
      <listitem>
        <para><keycap>Workspace:</keycap> Container of a single rooted tree of
        Items. (Note that here it is not exactly the same as
        <parameter>javax.jcr.Workspace</parameter> as it is not a Session object).</para>
      </listitem>
    </itemizedlist>
    <para>The JCR application usecase typically includes two initial steps:</para>
    <itemizedlist>
      <listitem>
        <para>Obtaining Repository object by getting <emphasis role="bold">Repository Service</emphasis> from the current eXo
        Container (eXo &quot;native&quot; way) or via JNDI lookup if eXo repository is
        bound to the naming context using (see <link linkend="JCR.eXoJCRconfiguration.RepositoryConfiguration">Repository configuration</link> for more details).</para>
      </listitem>
      <listitem>
        <para>Creating <parameter>javax.jcr.Session</parameter> object that calls <parameter>Repository.login(..)</parameter>.</para>
      </listitem>
    </itemizedlist>

  <citetitle>
    <para xml:id="JCRref.Introduction.JCRArchitecture.WorkspaceDataModel"><emphasis role="bold">Workspace Data Model</emphasis></para>
  </citetitle>
    <para>The following diagram explains which components of eXo JCR
    implementation are used in a data flow to perform operations specified in
    JCR API.</para>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/concepts/wsdatamodel.gif"/>
      </imageobject>
    </mediaobject>
    <para>The Workspace Data Model can be split into 4 levels by data
    isolation and value from the JCR model point of view.</para>
    <itemizedlist>
      <listitem>
        <para>eXo JCR core implements <emphasis role="bold">JCR API</emphasis>
        interfaces, such as Item, Node, Property. It contains JCR &quot;logical&quot; view
        on stored data.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Session Level</emphasis>: Isolate
        transient data viewable inside one JCR Session and interacts with API
        level using eXo JCR internal API.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Session Data Manager</emphasis>: Maintain
        transient session data. With data access/ modification/ validation
        logic, it contains Modified Items Storage to hold the data changed
        between subsequent save() calling and Session Items Cache.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Transaction Data Manager</emphasis>:
        Maintain session data between save() and transaction commit/ rollback
        if the current session is part of a transaction.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Workspace Level</emphasis>: Operate for
        particular workspace shared data. It contains objects of each Workspace.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Workspace Storage Data Manager:</emphasis>
        Maintain workspace data, including final validation, events firing, and caching.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Workspace Data Container</emphasis>:
        Implement physical data storage. It allows different types of backend
        (such as RDB, FS files) to be used as a storage for JCR data. With
        the main Data Container, other storages for the persisted Property Values
        can be configured and used.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Indexer:</emphasis> Maintain workspace
        data indexing for further queries.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Storage Level</emphasis>: Persistent
        storages for:</para>
        <itemizedlist>
          <listitem>
            <para>JCR Data.</para>
          </listitem>
          <listitem>
            <para>Indexes (Apache Lucene).</para>
          </listitem>
          <listitem>
            <para>Values (for example, for BLOBs) if being different from the main Data Container.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
</section>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!-- 2.2.5. RepositoryCreationService -->
<section id="JCR.RepositoryCreationService" role="NotInToc">
  <title>RepositoryCreationService</title>
    <para><emphasis>RepositoryCreationService</emphasis> is the service which is used to create repositories
    in runtime. The service can be used in a standalone or cluster
    environment.</para>
  <!-- Dependencies -->
  <para id="JCR.RepositoryCreationService.Dependencies">
    <citetitle><emphasis role="bold">Dependencies</emphasis></citetitle>
  </para>
    <para><parameter>RepositoryConfigurationService</parameter> depends on the next components:</para>

    <itemizedlist>
      <listitem>
        <para><link linkend="Core.DBCreatorService">DBCreator</link> which is used to create new database for each unbinded datasource.</para>
      </listitem>

      <listitem>
        <para>BackupManager which is used to create repository from backup.</para>
      </listitem>

      <listitem>
        <para><link linkend="Kernel.RPCService">RPCService</link> which is used for communicating between cluster-nodes.</para>

        <note>
          <para>RPCService may not be configured. In this case, RepositoryService will work as a standalone service.</para>
        </note>
      </listitem>
    </itemizedlist>  
  <!-- How it works -->
  <para id="JCR.RepositoryCreationService.HowItWorks">
    <citetitle><emphasis role="bold">How it works</emphasis></citetitle>
  </para>
    <itemizedlist>
      <listitem>
        <para>The user executes <parameter>reserveRepositoryName(String repositoryName)</parameter> -
        client-node calls coordinator-node to reserve <parameter>repositoryName</parameter>. If this
        name is already reserved or repository with this name exists,
        client-node will fetch <parameter>RepositoryCreationException</parameter>. If not, Client will
        get token string.</para>
      </listitem>

      <listitem>
        <para>Instead of executing <parameter>createRepository(String backupId,
        RepositoryEntry rEntry, String token)</parameter>, Coordinator-node checks the
        token, and creates Repository.</para>
      </listitem>

      <listitem>
        <para>When the repository has been created, the user-node broadcasts a message to
        all <parameter>clusterNodes</parameter> with <parameter>RepositoryEntry</parameter>, so each cluster node starts new
        Repository.</para>
      </listitem>
    </itemizedlist>

    <para>There are two ways to create a repository: make it in single step - just
    call <parameter>createRepository(String backupId, RepositoryEntry)</parameter>; or reserve
   <parameter> repositoryName</parameter> at first (<parameter>reserveRepositoryName(String repositoryName)</parameter>,
    then create the reserved repository <parameter>(createRepository(String backupId,
    RepositoryEntry rEntry, String token)</parameter>.</para>

    <note>      
      <itemizedlist id="JCR.RepositoryCreationService.ConclusionsAndRestrictions">
      <listitem>
        <para>Each datasource in <parameter>RepositoryEntry</parameter> of a new Repository must have
        unbinded datasources. This means such a datasource must not have database behind it.
        This restriction is to avoid corruption with existing
        repositories data.</para>
      </listitem>

      <listitem>
        <para><parameter>RPCService</parameter> is an optional component, but
        <parameter>RepositoryCreatorService</parameter> cannot communicate with other cluster-nodes
        without it.</para>
      </listitem>
    </itemizedlist>  
    </note>
  <!-- 2.2.5.1 Configuration   -->
  <section id="JCR.RepositoryCreationService.Configuration">
    <title>Configuration</title>

    <para>The RepositoryCreationService configuration is as follows:</para>
    <programlistingco>
      <areaspec>
        <area coords="8" id="JCR.RepositoryCreationService.Configuration.factory-class-name"/>
      </areaspec>
<programlisting language="xml">&lt;component&gt;
   &lt;key&gt;org.exoplatform.services.jcr.ext.repository.creation.RepositoryCreationService&lt;/key&gt;
   &lt;type&gt;
      org.exoplatform.services.jcr.ext.repository.creation.RepositoryCreationServiceImpl
   &lt;/type&gt;
     &lt;init-params&gt; 
         &lt;value-param&gt; 
            &lt;name&gt;factory-class-name&lt;/name&gt; 
            &lt;value&gt;org.apache.commons.dbcp.BasicDataSourceFactory&lt;/value&gt; 
         &lt;/value-param&gt; 
      &lt;/init-params&gt;
&lt;/component&gt;</programlisting>
  <calloutlist>
    <callout arearefs="JCR.RepositoryCreationService.Configuration.factory-class-name">
      <para><parameter>factory-class-name</parameter>: Indicate what
        the factory needs to use for creating DataSource objects. This parameter is not mandatory.
      </para>
    </callout>
  </calloutlist>
</programlistingco>
  </section>
  <!-- 2.2.5.2 RepositoryCreationService Interface -->
  <section id="JCR.RepositoryCreationService.RepositoryCreationServiceInterface">
    <title>RepositoryCreationService interface</title>
	<para>The following code shows all methods proposed by RepositoryCreationService that is used to create a new repository:</para>
<programlisting language="java">public interface RepositoryCreationService
{
   /**
    * Reserves, validates and creates repository in a simplified form.
    * 
    * @param rEntry - repository Entry - note that datasource must not exist.
    * @param backupId - backup id
    * @param creationProps - storage creation properties 
    * @throws RepositoryConfigurationException
    *          if some exception occurred during repository creation or repository name is absent in reserved list
    * @throws RepositoryCreationServiceException
    *          if some exception occurred during repository creation or repository name is absent in reserved list
    */
   void createRepository(String backupId, RepositoryEntry rEntry, StorageCreationProperties creationProps)
      throws RepositoryConfigurationException, RepositoryCreationException;n

   /**
    * Reserves, validates and creates repository in a simplified form. 
    * 
    * @param rEntry - repository Entry - note that datasource must not exist.
    * @param backupId - backup id
    * @throws RepositoryConfigurationException
    *          if some exception occurred during repository creation or repository name is absent in reserved list
    * @throws RepositoryCreationServiceException
    *          if some exception occurred during repository creation or repository name is absent in reserved list
    */
   void createRepository(String backupId, RepositoryEntry rEntry) throws RepositoryConfigurationException,
      RepositoryCreationException;

   /**
    * Reserve repository name to prevent repository creation with same name from other place in same time
    * via this service.
    * 
    * @param repositoryName - repositoryName
    * @return repository token. Anyone obtaining a token can later create a repository of reserved name.
    * @throws RepositoryCreationServiceException if can't reserve name
    */
   String reserveRepositoryName(String repositoryName) throws RepositoryCreationException;

   /**
    * Creates repository, using token of already reserved repository name. 
    * Good for cases, when repository creation should be delayed or made asynchronously in dedicated thread. 
    * 
    * @param rEntry - repository entry - note, that datasource must not exist
    * @param backupId - backup id
    * @param rToken - token
    * @param creationProps - storage creation properties
    * @throws RepositoryConfigurationException
    *          if some exception occurred during repository creation or repository name is absent in reserved list
    * @throws RepositoryCreationServiceException
    *          if some exception occurred during repository creation or repository name is absent in reserved list
    */
   void createRepository(String backupId, RepositoryEntry rEntry, String rToken, StorageCreationProperties creationProps)
      throws RepositoryConfigurationException, RepositoryCreationException;

   /**
    * Creates  repository, using token of already reserved repository name. Good for cases, when repository creation should be delayed or 
    * made asynchronously in dedicated thread. 
    * 
    * @param rEntry - repository entry - note, that datasource must not exist
    * @param backupId - backup id
    * @param rToken - token
    * @throws RepositoryConfigurationException
    *          if some exception occurred during repository creation or repository name is absent in reserved list
    * @throws RepositoryCreationServiceException
    *          if some exception occurred during repository creation or repository name is absent in reserved list
    */
   void createRepository(String backupId, RepositoryEntry rEntry, String rToken)
      throws RepositoryConfigurationException, RepositoryCreationException;

   /**
    * Remove previously created repository. 
    * 
    * @param repositoryName - the repository name to delete
    * @param forceRemove - force close all opened sessions 
    * @throws RepositoryCreationServiceException
    *          if some exception occurred during repository removing occurred
    */
   void removeRepository(String repositoryName, boolean forceRemove) throws RepositoryCreationException;

}</programlisting>
  </section>      
</section>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!-- 2.2.4.3 JBoss Cache Configuration -->
<section id="JCR.JBossCacheConfigurationTemplates">
  <title>JBoss Cache configuration</title>

  <para>This section will show you how to use and configure Jboss Cache in the
  clustered environment. Also, you will know how to use a template-based
  configuration offered by JCR for JBoss Cache instances.</para>
  <!-- For indexer, lock manager and data container -->
  <para id="JCR.JBossCacheConfigurationTemplates.JBoss_Cache_Config_for_Indexer">
    <citetitle><emphasis role="bold">For indexer, lock manager and data container</emphasis></citetitle>
  </para>
    <para>Each mentioned component uses instances of JBoss Cache product for
    caching in clustered environment. So every element has its own transport
    and has to be configured in a proper way. As usual, workspaces have
    similar configuration but with different cluster-names and maybe some
    other parameters. The simplest way to configure them is to define their
    own configuration files for each component in each workspace:</para>

    <programlisting language="xml">&lt;property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}"/&gt;</programlisting>

    <para>However, if there are few workspaces, configuring them in such a way can
    be painful and hard to manage JCR which offers a template-based configuration for JBoss Cache instances. You can have one template for
    Lock Manager, one for Indexer and one for data container and use them in
    all the workspaces, defining the map of substitution parameters in a main
    configuration file. Just simply define <parameter>${jbosscache-&lt;parameter
    name&gt;}</parameter> inside <parameter>xml-template</parameter> and list correct values in the JCR configuration
    file just below "<parameter>jbosscache-configuration</parameter>", as shown:</para>

	<itemizedlist>
		<listitem>
			<para><emphasis role="bold">Template:</emphasis></para>

    <programlisting language="xml">...
&lt;clustering mode="replication" clusterName="${jbosscache-cluster-name}"&gt;
  &lt;stateRetrieval timeout="20000" fetchInMemoryState="false" /&gt;
...</programlisting>
		</listitem>
		<listitem>
			<para><emphasis role="bold">JCR configuration file:</emphasis></para>

<programlisting language="xml">...
&lt;property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" /&gt;
&lt;property name="jbosscache-cluster-name" value="${gatein.jcr.jgroups.config}" /&gt;
...</programlisting>
		</listitem>
   </itemizedlist>
  <!-- JGroups configuration -->
  <para id="JCR.JBossCacheConfigurationTemplates.Jboss_Configuration">
    <citetitle><emphasis role="bold">JGroups configuration</emphasis></citetitle>
  </para>
    <para>JGroups is used by JBoss Cache for network communications and
    transport in a clustered environment. If property "jgroups-configuration"
    is defined in component configuration, it will be injected into the JBoss
    Cache instance on startup.</para>

    <programlisting language="xml">&lt;property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" /&gt;</programlisting>

    <para>As mentioned above, each component (lock manager, data container and
    query handler) for each workspace requires its own clustered environment.
    In other words, they have their own clusters with unique names. By
    default, each cluster should perform multi-casts on a separate port. This
    configuration leads to much unnecessary overhead on cluster. That is why
    JGroups offers multiplexer feature, providing the ability to use one single
    channel for a set of clusters. This feature reduces network overheads and
    increase performance and stability of application.</para>
    <para> To enable multiplexer
    stack, you should define appropriate configuration file (<filename>upd-mux.xml</filename> is
    pre-shipped one with JCR) and set "<parameter>jgroups-multiplexer-stack</parameter>" to
    "true".</para>

    <programlisting language="xml">&lt;property name="jgroups-configuration" value="jar:/conf/portal/udp-mux.xml" /&gt;
&lt;property name="jgroups-multiplexer-stack" value="true" /&gt;</programlisting>

    <para>It<emphasis> is now highly recommended to use the shared transport
    instead of the multiplexer</emphasis>. To do so, simply disable the
    multiplexer stack in the configuration of each component by setting the
    property <emphasis>jgroups-multiplexer-stack</emphasis> to
    "false" then you will need to ensure that the format of
    your jgroups configuration is not anymore a jgroups stack definitions but
    a normal configuration. Finally, you will need to set the property
    <emphasis>singleton_name</emphasis> of your JGroups configuration to a
    unique name (this name must not be the same from one portal container to
    another).</para>

    <programlisting language="xml">&lt;property name="jgroups-configuration" value="jar:/conf/portal/udp-mux.xml" /&gt;
&lt;property name="jgroups-multiplexer-stack" value="false" /&gt;</programlisting>  
  <!-- Allow to share JBoss Cache instances  -->
  <para id="JCR.JBossCacheConfigurationTemplates.Allow_to_share_JBOSS_Cache_Instances">
    <citetitle><emphasis role="bold">Allow sharing JBoss Cache instances</emphasis></citetitle>
  </para>
    <para>A JBoss Cache instance is quite resource consuming and there are three JBoss Cache instances by default (one instance for the indexer, one for
    the lock manager and one for the data container) for each workspace, so if
    you intend to have a lot of workspaces, it could make sense to decide to
    share one JBoss Cache instance with several cache instances of the same
    type (for example: indexer, lock manager or data container). This feature is
    disabled by default and can be enabled at component configuration level
    (for example: indexer configuration, lock manager configuration and/or data
    container configuration) by setting the property "jbosscache-shareable" to
    "true" as below:</para>

    <programlisting language="xml">&lt;property name="jbosscache-shareable" value="true" /&gt;</programlisting>

    <para>Once enabled, this feature will allow the JBoss Cache instance used
    by the component to be re-used by another components of the same type
    (for example: indexer, lock manager or data container) with the same JBoss
    Cache configuration (except the eviction configuration that can be
    different). This means all the parameters of type
    ${jbosscache-&lt;parameter name&gt;} must be identical between the
    components of same type of different workspaces. In other words, if you use
    the same values for the parameters of type ${jbosscache-&lt;parameter
    name&gt;} in each workspace, you will have only 3 JBoss Cache instances
    (one instance for the indexer, one for the lock manager and one for the
    data container) used whatever the total amount of workspaces
    defined.</para>  
    <!-- Shipped JBoss Cache configuration templates -->
  <para id="JCR.JBossCacheConfigurationTemplates.Shipped_Jboss_Cache_Config_template">
    <citetitle><emphasis role="bold">Shipped JBoss Cache configuration templates</emphasis></citetitle>
  </para>
    <para>JCR implementation is shipped with ready-to-use JBoss Cache
    configuration templates for JCR's components. They are situated in
    application package in /conf/porta/ folder.</para>
    <itemizedlist>
      <listitem>
        <para id="JCR.JBossCacheConfigurationTemplates.Shipped_Jboss_Cache_Config_template.Data_container_template">
          <emphasis role="bold">Data container template</emphasis>: The Data container template is in <filename>jbosscache-data.xml</filename>.
        </para>  
<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.1"&gt;

   &lt;locking useLockStriping="false" concurrencyLevel="500" lockParentForChildInsertRemove="false"
	  lockAcquisitionTimeout="20000" /&gt;

   &lt;clustering mode="replication" clusterName="${jbosscache-cluster-name}"&gt;
	  &lt;stateRetrieval timeout="20000" fetchInMemoryState="false" /&gt;
	  &lt;sync /&gt;
   &lt;/clustering&gt;

   &lt;!-- Eviction configuration --&gt;
   &lt;eviction wakeUpInterval="5000"&gt;
	  &lt;default algorithmClass="org.jboss.cache.eviction.ExpirationAlgorithm"
		 actionPolicyClass="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.ParentNodeEvictionActionPolicy"
		 eventQueueSize="1000000"&gt;
		 &lt;property name="maxNodes" value="1000000" /&gt;
		 &lt;property name="warnNoExpirationKey" value="false" /&gt;
	  &lt;/default&gt;
   &lt;/eviction&gt;
&lt;/jbosscache&gt;</programlisting>

    </listitem>      
    <listitem>
    <para id="JCR.JBossCacheConfigurationTemplates.Shipped_Jboss_Cache_Config_template.Lock_manager_template">
      <emphasis role="bold">Lock manager template</emphasis>: The Lock manager template name is in <filename>jbosscache-lock.xml</filename>.
    </para>
   

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.1"&gt;

   &lt;locking useLockStriping="false" concurrencyLevel="500" lockParentForChildInsertRemove="false"
      lockAcquisitionTimeout="20000" /&gt;
   &lt;clustering mode="replication" clusterName="${jbosscache-cluster-name}"&gt;
      &lt;stateRetrieval timeout="20000" fetchInMemoryState="false" /&gt;
      &lt;sync /&gt;
   &lt;/clustering&gt;
   &lt;loaders passivation="false" shared="true"&gt;
      &lt;preload&gt;
         &lt;node fqn="/" /&gt;
      &lt;/preload&gt;
      &lt;loader class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.JDBCCacheLoader" async="false" fetchPersistentState="false"
         ignoreModifications="false" purgeOnStartup="false"&gt;
         &lt;properties&gt;
            cache.jdbc.table.name=${jbosscache-cl-cache.jdbc.table.name}
            cache.jdbc.table.create=${jbosscache-cl-cache.jdbc.table.create}
            cache.jdbc.table.drop=${jbosscache-cl-cache.jdbc.table.drop}
            cache.jdbc.table.primarykey=${jbosscache-cl-cache.jdbc.table.primarykey}
            cache.jdbc.fqn.column=${jbosscache-cl-cache.jdbc.fqn.column}
            cache.jdbc.fqn.type=${jbosscache-cl-cache.jdbc.fqn.type}
            cache.jdbc.node.column=${jbosscache-cl-cache.jdbc.node.column}
            cache.jdbc.node.type=${jbosscache-cl-cache.jdbc.node.type}
            cache.jdbc.parent.column=${jbosscache-cl-cache.jdbc.parent.column}
            cache.jdbc.datasource=${jbosscache-cl-cache.jdbc.datasource}
         &lt;/properties&gt;
      &lt;/loader&gt;
   &lt;/loaders&gt;
&lt;/jbosscache&gt;</programlisting>

      <note>
        <para>To prevent any consistency issue regarding the lock data,
        ensure that your cache loader is
        <emphasis>org.exoplatform.services.jcr.impl.core.lock.jbosscache.JDBCCacheLoader</emphasis>
        and your database engine is transactional.</para>
      </note>

    </listitem>
    <listitem>
    <para id="JCR.JBossCacheConfigurationTemplates.Shipped_Jboss_Cache_Config_template.Query_handler">
      <emphasis role="bold">Query handler (indexer) template</emphasis>
    </para>
      <para>Have a look at <filename>jbosscache-indexer.xml</filename></para>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.1"&gt;
   &lt;locking useLockStriping="false" concurrencyLevel="500" lockParentForChildInsertRemove="false"
      lockAcquisitionTimeout="20000" /&gt;
   &lt;clustering mode="replication" clusterName="${jbosscache-cluster-name}"&gt;
      &lt;stateRetrieval timeout="20000" fetchInMemoryState="false" /&gt;
      &lt;sync /&gt;
   &lt;/clustering&gt;
&lt;/jbosscache&gt;</programlisting>

    </listitem>
  </itemizedlist>
  <note>
    <para>To learn about the properties, see their corresponding descriptions in <link linkend="JCR.ClusterConfig">Configure JCR in cluster</link>.</para>
  </note>
</section>

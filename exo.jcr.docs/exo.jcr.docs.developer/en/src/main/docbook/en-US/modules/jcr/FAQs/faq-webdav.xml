<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="JCR.FAQ.WebDAV">
  <title>WebDAV</title>

  <para xml:id="JCR.FAQ.JCR.WebDAV.UploadFileToWebDAVServer">
    <citetitle>
      <emphasis role="bold">I uploaded a file to WebDAV server using Mac OS Finder, but the
        file size is '0', what is wrong?
      </emphasis>
    </citetitle>
  </para>


  <para>This is known as a finder bug started from Mac OS v.10.5.3 and
      not yet fixed.
    </para>

    <para>For more details follow:
      <ulink
              url="http://discussions.apple.com/thread.jspa?threadID=1538882&amp;start=0&amp;tstart=0">Apple
        Discussion thread.
      </ulink>
    </para>

  <para xml:id="JCR.FAQ.JCR.WebDAV.ManageCacheControlValue">
    <citetitle>
      <emphasis role="bold">Can I manage 'cache-control' value for different media-types
        from server configuration?
      </emphasis>
    </citetitle>
  </para>


    <para>Use "cache-control" configuration parameter.</para>

    <para>The value of this parameter must contain colon-separated pairs
      "MediaType:cache-control value"
    </para>

    <para>For example, if you need to cache all text/xml and text/plain
      files for 5 minutes (300 sec.) and other text/\* files for 10 minutes
      (600 sec.), use the next configuration:
    </para>

    <programlisting language="xml">&lt;component&gt;
      &lt;type&gt;org.exoplatform.services.jcr.webdav.WebDavServiceImpl&lt;/type&gt;
      &lt;init-params&gt;
      &lt;value-param&gt;
      &lt;name&gt;cache-control&lt;/name&gt;
      &lt;value&gt;text/xml,text/plain:max-age=300;text/*:max-age=600;&lt;/value&gt;
      &lt;/value-param&gt;
      &lt;init-params&gt;
      &lt;component&gt;
    </programlisting>

  <para xml:id="JCR.FAQ.JCR.WebDAV.PerformWebDAVRequestsUsingCurl">
    <citetitle>
      <emphasis role="bold">How to perform WebDAV requests using curl?</emphasis>
    </citetitle>
  </para>


    <para>Simple Requests</para>

    <para>For simple request such as: GET, HEAD, MKCOL, COPY, MOVE,
      DELETE, CHECKIN, CHECKOUT, UNCHECKOUT, LOCK, UNLOCK, VERSIONCONTROL,
      OPTIONS
    </para>

    <para>perform:</para>

    <programlisting>curl -i -u 'user:pass' -X 'METHOD_NAME' 'resource_url'</programlisting>

    <para>for example to create a folder named test perform:</para>

    <programlisting>curl -i -u 'root:exo' -X MKCOL 'http://localhost:8080/rest/jcr/repository/production/test
    </programlisting>

    <para>to PUT a test.txt file from your current folder to "test "folder
      on server perform:
    </para>

    <programlisting>curl -i -u 'root:exo' -X PUT 'http://localhost:8080/rest/jcr/repository/production/test/test.txt' -d
      @test.txt
    </programlisting>

    <para>Requests with XML body</para>

    <para>For requests which contains xml body such as: ORDER, PROPFIND,
      PROPPATCH, REPORT, SEARCH
    </para>

    <para>add
      <emphasis role="bold">-d 'xml_body text'</emphasis>
      or
      <emphasis role="bold">-d @body.xml</emphasis>
    </para>

    <para>(body.xml must contain a valid xml request bidy.) to you
      curl-command:
    </para>

    <programlisting>curl -i -u 'user:pass' -X 'METHOD_NAME' -H 'Headers' 'resource_url' -d 'xml_body text'
    </programlisting>

    <para>For example about finding all files containing "test"
      perform:
    </para>

    <programlisting>curl -i -u "root:exo" -X "SEARCH" "http://192.168.0.7:8080/rest/jcr/repository/production/" -d
      "&lt;?xml version='1.0' encoding='UTF-8' ?&gt;
      &lt;D:searchrequest xmlns:D='DAV:'&gt;
      &lt;D:sql&gt;SELECT * FROM nt:base WHERE contains(*, 'text')&lt;/D:sql&gt;
      &lt;/D:searchrequest&gt;"
    </programlisting>

    <para>If you need to add some headers to your request, use \-H
      key.
    </para>

    <para>To have more information about methods parameters, you can find
      in
      <ulink url="http://www.ietf.org/rfc/rfc2518.txt">HTTP Extensions
        for Distributed Authoring
      </ulink>
      specification.
    </para>

  <para xml:id="JCR.FAQ.JCR.WebDAV.eXoJCRWebDAVServerTreatsContentEncoding">
    <citetitle>
      <emphasis role="bold">How eXo JCR WebDAV server treats content encoding?</emphasis>
    </citetitle>
  </para>


    <para>OS client (Windows, Linux etc) doesn't set an encoding in a
      request. But eXo JCR WebDAV server looks for an encoding in a
      Content-Type header and set it to jcr:encoding. See
      <ulink url="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">
        http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
      </ulink> 14.17 Content-Type (e.g. Content-Type: text/html; charset=ISO-8859-4).
      So, if a client will set Content-Type header, e.g. JS code from a
      page, it will works for a text file as expected.
    </para>

    <para>If WebDAV request doesn't contain a content encoding, it's
      possible to write a dedicated action in a customer application. The
      action will set jcr:encoding using its own logic, e.g. based on IP or
      user preferences.
    </para>
</section>

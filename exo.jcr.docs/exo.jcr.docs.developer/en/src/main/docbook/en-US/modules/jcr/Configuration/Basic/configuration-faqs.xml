<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
        "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<!--2.1.4 Frequently asked questions -->

<section id="JCR.ConfigurationFAQs" role="NotInToc">
  <title>Frequently asked questions</title>
<qandaset>
	<qandaentry xml:id="JCR.FAQ.JCR.Core.HowToUseLuceneSpellchecker">
		<question>
		<para><emphasis role="bold">How to use Lucene spellchecker?</emphasis></para>
		</question>
		<answer>
		<para>You simply do the following steps:</para>

		<itemizedlist>
		<listitem>
		<para>Enable the Lucene spellchecker in the JCR QueryHandler configuration:</para>

<programlisting language="xml">&lt;query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex"&gt;
	&lt;properties&gt;
		...
		&lt;property name="spellchecker-class" value="org.exoplatform.services.jcr.impl.core.query.lucene.spell.LuceneSpellChecker$FiveSecondsRefreshInterval"/&gt;
		...
	&lt;/properties&gt;
&lt;/query-handler&gt;</programlisting>
		</listitem>
		</itemizedlist>

		<itemizedlist>
		<listitem>
		<para>Execute query with rep:spellcheck function and word that is checked:
		</para>

<programlisting language="java">Query query = qm.createQuery("select rep:spellcheck() from nt:base where " +
  "jcr:path = '/' and spellcheck('word that is checked')", Query.SQL);
  RowIterator rows = query.execute().getRows();
</programlisting>
		</listitem>
		</itemizedlist>

		<itemizedlist>
		<listitem>
		<para>Fetch a result:</para>

<programlisting language="java">Row r = rows.nextRow();
  Value v = r.getValue("rep:spellcheck()");
</programlisting>
		</listitem>
		</itemizedlist>

		<para>If there is no any result, this means there is no suggestion, so word is correct or spellcheckers dictionary does not contain any words like the checked word.
		</para>
		</answer>
	</qandaentry>

    <qandaentry xml:id="JCR.FAQ.JCR.Core.AffectSpellcheckerResults">
		  <question>
			<para><emphasis role="bold">How can I affect spellchecker results?</emphasis></para>
		  </question>
		<answer>
		<para>There are two parameters in the JCR QueryHandler configuration:</para>

		<itemizedlist>
		  <listitem>
			<para>Minimal distance between checked word and proposed
			  suggestion:
			</para>
		  </listitem>

		  <listitem>
			<para>Search for more popular suggestions:</para>

<programlisting language="xml">&lt;query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex"&gt;
	&lt;properties&gt;
		...
		&lt;property name="spellchecker-class" value="org.exoplatform.services.jcr.impl.core.query.lucene.spell.LuceneSpellChecker$FiveSecondsRefreshInterval" /&gt;
		&lt;property name="spellchecker-more-popular" value="false" /&gt;
		&lt;property name="spellchecker-min-distance" value="0.55" /&gt;
		...
	&lt;/properties&gt;
&lt;/query-handler&gt;</programlisting>
		  </listitem>
		</itemizedlist>

		<para>Minimal distance is counted as Levenshtein distance between checked word and spellchecker suggestion.
		</para>

		<para>The MorePopular parameter affects in the following way:
		</para>
        <para>If "morePopular" is disabled:</para>

		<itemizedlist>
		  <listitem>
			<para>If the proposed word exists in the directory: no suggestion given.
			</para>
		  </listitem>

		  <listitem>
			<para>If the proposed word does not exist in the directory: propose the closed word.
			</para>
		  </listitem>
		</itemizedlist>

		<para>If "morePopular" is enabled:</para>

		<itemizedlist>
		  <listitem>
			<para>No matter word exists or not, checker will propose the closed word that is more popular than the checked word.
			</para>
		  </listitem>
		</itemizedlist>
		</answer>
   </qandaentry>
   <qandaentry xml:id="JCR.eXoJCRconfiguration.HelpApplicationToProhibitUseOfClosedSessions">
    <question>
		<para><emphasis role="bold">Does Help application prohibit the use of closed sessions?</emphasis></para>
	</question>
	<answer>
    <para>Products that use JCR, sometimes missuse it since they continue
    to use a session that has been closed through a method call on a node, a
    property or even the session itself. To prevent bad practices, we propose
    three following modes:</para>

    <itemizedlist>
      <listitem>
        <para>If the system property
        <emphasis>exo.jcr.prohibit.closed.session.usage</emphasis> has been
        set to "true", then a RepositoryException will be
        thrown any time an application is trying to access to a closed session.
        In the stack trace, you will be able to know the call stack that
        closes the session.</para>
      </listitem>

      <listitem>
        <para>If the system property
        <emphasis>exo.jcr.prohibit.closed.session.usage</emphasis> has not
        been set and the system property
        <emphasis>exo.product.developing</emphasis> has been set to
        <emphasis>true</emphasis>, then a warning will be logged in the log
        file with the full stack trace in order to help identifying the root
        cause of the issue. In the stack trace, you will be able to know the
        call stack that closes the session.</para>
      </listitem>

      <listitem>
        <para>If none of the previous system properties have been set, then we
        will ignore that issue and let the application use the closed
        session as before without doing anything to
        allow applications to migrate step by step.</para>
      </listitem>
    </itemizedlist>
   </answer>
  </qandaentry>
	<qandaentry xml:id="JCR.eXoJCRconfiguration.HelpApplicationToAllowUseOfClosedDataSources">
		<question>
			<para><emphasis role="bold">Does Help application allow the use of closed datasources?</emphasis> </para>
		</question>
		<answer>
			<para>Since the usage of closed session affects usage of closed datasource,
			we propose three ways to resolve such kind of issues: </para>

			<itemizedlist>
				<listitem>
					<para>If the system property
					<emphasis>exo.jcr.prohibit.closed.datasource.usage</emphasis> is
					set to <emphasis>true</emphasis> (default value) then a SQLException will be
					thrown any time an application will try to access to a closed datasource.
					In the stack trace, you will be able to know the call stack that
					closes the datasource.</para>
				</listitem>

				<listitem>
					<para>If the system property
					<emphasis>exo.jcr.prohibit.closed.datasource.usage</emphasis> is
					set to "false" and the system property
					<emphasis>exo.product.developing</emphasis> is set to
					"true", then a warning will be logged in the log
					file with the full stack trace in order to help identifying the root
					cause of the issue. In the stack trace, you will be able to know the
					call stack that closes the datasource.</para>
				</listitem>

				<listitem>
					<para>If the system property
					<emphasis>exo.jcr.prohibit.closed.datasource.usage</emphasis> is
					set to "false" and the system property
					<emphasis>exo.product.developing</emphasis> is set to
					"false" usage of closed datasource will be allowed
					and nothing will be logged or thrown.</para>
				</listitem>
			</itemizedlist>
		</answer>
	</qandaentry>
	<qandaentry xml:id="JCR.eXoJCRconfiguration.GettingEffectiveConfigurationAtRuntimeOfAllRepositories">
		<question>
			<para><emphasis role="bold">How to get the effective configuration at Runtime of all the repositories?</emphasis> </para>
		</question>
		<answer>
			<para>The effective configuration of all the repositories and their
			workspaces can be known thanks to the method
			<emphasis>getConfigurationXML</emphasis>(). This method is exposed through JMX at
			the <emphasis>RepositoryServiceConfiguration</emphasis> level. In case of a
			<emphasis>PortalContainer</emphasis>, the name of the related MBean will be
			of type <emphasis>exo:portal=${portal-container-name},service=RepositoryServiceConfiguration</emphasis>.
			This method will give you the effective configuration in XML format that
			has been really interpreted by the the JCR core. This could be helpful to
			understand how your repositories/workspaces are configured especially if
			you would like to overwrite the configuration for some reasons.</para>
		</answer>
	</qandaentry>
</qandaset>
</section>
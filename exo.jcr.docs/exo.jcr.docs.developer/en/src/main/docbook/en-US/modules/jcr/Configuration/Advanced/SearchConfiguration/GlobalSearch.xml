<section id="JCR.SearchConfiguration.Global_Search_Index">
    <title>Global Search Index</title>    
    <para id="JCR.SearchConfiguration.Global_Search_Index.Configuration">
	  The global search index is configured in the above-mentioned configuration file
      (<filename>portal/WEB-INF/conf/jcr/repository-configuration.xml</filename>)
      in the <parameter>query-handler</parameter> tag.</para>
<programlisting language="xml">&lt;query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex"&gt;</programlisting>

      <para>In fact, when using Lucene, you should always use the same
      analyzer for indexing and for querying, otherwise the results are
      unpredictable. You don't have to worry about this, eXo JCR does this for
      you automatically. If you don't like the StandardAnalyzer configured by
      default, just replace it with your own.</para>

      <para>If you don't have a handy QueryHandler, you should learn how
      to create a customized Handler in 5 minutes.</para>    
    <!-- 2.2.1.2.2. Customized Search Indexes and Analyzers -->
    <section id="JCR.SearchConfiguration.Global_Search_Index.Customized_Search_Indexes_Analyzers">
      <title>Customized Search Indexes and Analyzers</title>

      <para>By default eXo JCR uses the Lucene standard Analyzer to index
      contents. This analyzer uses some standard filters in the method that
      analyzes the content:</para>
      
      <programlisting language="java">public TokenStream tokenStream(String fieldName, Reader reader) {
    StandardTokenizer tokenStream = new StandardTokenizer(reader, replaceInvalidAcronym);
    tokenStream.setMaxTokenLength(maxTokenLength);
    TokenStream result = new StandardFilter(tokenStream);
    result = new LowerCaseFilter(result);
    result = new StopFilter(result, stopSet);
    return result;
  }</programlisting>
  
  <itemizedlist>
          <listitem>
            <para>The first one (StandardFilter) removes 's (as 's in
            "Peter's") from the end of words and removes dots from
            acronyms.</para>
          </listitem>

          <listitem>
            <para>The second one (LowerCaseFilter) normalizes token text to
            lower case.</para>
          </listitem>

          <listitem>
            <para>The last one (StopFilter) removes stop words from a token
            stream. The stop set is defined in the analyzer.</para>
          </listitem>
        </itemizedlist>

      <para>For specific cases, you may wish to use additional filters like
      <phrase>ISOLatin1AccentFilter</phrase>, which replaces accented
      characters in the ISO Latin 1 character set (ISO-8859-1) by their
      unaccented equivalents.</para>

      <para>In order to use a different filter, you have to create a new
      analyzer, and a new search index to use the analyzer. You put it in a
      jar, which is deployed with your application.</para>
      <!-- Create a filter -->
      <para id="JCR.SearchConfiguration.Global_Search_Index.Customized_Search_Indexes_Analyzers.Creating_filter">
        <citetitle><emphasis role="bold">Create a filter</emphasis></citetitle>
      </para>
        <para>The <parameter>ISOLatin1AccentFilter</parameter> is not present in the current Lucene
        version used by eXo. You can use the attached file. You can also
        create your own filter with the relevant method as follows:</para>
<programlisting language="java">public final Token next(final Token reusableToken) throws java.io.IOException</programlisting> 
        <para>This method defines how chars are read and used by the filter.</para>

        <!-- Create an analyzer -->
      <para id="JCR.SearchConfiguration.Global_Search_Index.Customized_Search_Indexes_Analyzers.Creating_Analyzer">
        <citetitle><emphasis role="bold">Create an analyzer</emphasis></citetitle>
      </para>
        <para>The analyzer has to extend <parameter>org.apache.lucene.analysis.standard.StandardAnalyzer</parameter>, and overload the
        following method to put your own filters.</para>
<programlisting language="java">public TokenStream tokenStream(String fieldName, Reader reader)</programlisting>
        
		<para>You can have a glance at the example analyzer attached to this article.</para>

        <!-- Configure Platform to use your Analyzer -->
      <para id="JCR.SearchConfiguration.Global_Search_Index.Customized_Search_Indexes_Analyzers.Configure_Application_Use_Analyzer">
        <citetitle><emphasis role="bold">Configure Platform to use your Analyzer</emphasis></citetitle>
      </para>
        <para>In <filename>portal/WEB-INF/conf/jcr/repository-configuration.xml</filename>, you have to add the <parameter>analyzer</parameter> parameter to each query-handler config:</para>
        
<programlisting language="xml">&lt;query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex"&gt;
	&lt;properties&gt;
	  ...
	  &lt;property name="analyzer" value="org.exoplatform.services.jcr.impl.core.MyAnalyzer"/&gt;
	  ...
	&lt;/properties&gt;
&lt;/query-handler&gt;</programlisting>

        <para>When you start eXo, your SearchIndex will start to index content with the specified filters.</para>    

        <!-- Create a search index -->
      <para id="JCR.SearchConfiguration.Global_Search_Index.Customized_Search_Indexes_Analyzers.Creating_Search_Index">
        <citetitle><emphasis role="bold">Create a search index</emphasis></citetitle>
      </para>
        <para>You have had the analyzer, so you now need to write the SearchIndex,
        which will use the analyzer. You have to extend <parameter>org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex</parameter>. You
        have to write the constructor to set the right analyzer and the following method to return your analyzer.</para>

<programlisting language="java">public Analyzer getAnalyzer() {
    return MyAnalyzer;
}</programlisting> 
  <para>You can see the attached SearchIndex.</para>

        <note>
          <para>Since 1.12 version, you can set Analyzer directly in your configuration. So, creating a new SearchIndex only for new Analyzer is
          redundant.</para>
        </note>

      <!-- Configure Platform to use your SearchIndex -->
      <para id="JCR.SearchConfiguration.Global_Search_Index.Customized_Search_Indexes_Analyzers.Configuring_Application_Use_SearchIndex">
        <citetitle><emphasis role="bold">Configure Platform to use your SearchIndex</emphasis></citetitle>
      </para>
        <para>In <filename>portal/WEB-INF/conf/jcr/repository-configuration.xml</filename>, you have to replace each:</para>
<programlisting language="xml">&lt;query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex"&gt;</programlisting>
        <para>with your own class</para>
<programlisting language="xml">&lt;query-handler class="mypackage.indexation.MySearchIndex"&gt;</programlisting>

    </section>
        
    <!-- 2.2.1.2.3. Fulltext Search And Affecting Settings -->
    <xi:include href="fulltext-search-and-settings.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

  </section>
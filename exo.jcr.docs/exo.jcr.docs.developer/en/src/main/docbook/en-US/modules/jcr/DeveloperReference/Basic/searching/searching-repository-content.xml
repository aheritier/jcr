<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!--3.1.4. Search repository content-->
<section id="JCR.SearchingRepositoryContent" role="NotInToc">
  <title>Search repository content</title>
    <para>eXo Platform supports two query languages - SQL and XPath. A query, whether
    XPath or SQL, specifies a subset of nodes within a workspace, called the
    result set. The result set constitutes all the nodes in the workspace that
    meet the constraints stated in the query.</para>
	
	<para xml:id="JCR.SearchingRepositoryContent.QueryLifecycle">The Query Lifecycle can be illustrated as follows:</para>

  <para xml:id="JCR.SearchingRepositoryContent.QueryLifecycle.QueryCreationAndExecution">
    <citetitle>
      <emphasis role="bold">Create and execute a query</emphasis>
    </citetitle>
  </para>
  <itemizedlist>

  <listitem>
  <para>
    <emphasis role="bold">SQL</emphasis>
  </para>

  <programlisting language="java">// get QueryManager
QueryManager queryManager = workspace.getQueryManager();
// make SQL query
Query query = queryManager.createQuery("SELECT * FROM nt:base ", Query.SQL);
// execute query
QueryResult result = query.execute();</programlisting>
   </listitem>

    <listitem>
  <para>
    <emphasis role="bold">XPath</emphasis>
  </para>

  <programlisting language="java">// get QueryManager
QueryManager queryManager = workspace.getQueryManager();
// make XPath query
Query query = queryManager.createQuery("//element(*,nt:base)", Query.XPATH);
// execute query
QueryResult result = query.execute();</programlisting>
   </listitem>
  </itemizedlist>

  <para xml:id="JCR.SearchingRepositoryContent.QueryLifecycle.QueryResultProcessing">
    <citetitle>
      <emphasis role="bold">Query result processing</emphasis>
    </citetitle>
  </para>
  <programlisting language="java">// fetch query result
    QueryResult result = query.execute();</programlisting>

  <para>Now you can get results in an iterator of nodes:</para>

  <programlisting language="java">NodeIterator it = result.getNodes();</programlisting>

  <para>Or, get the result in a table:</para>

  <programlisting language="java">// get column names
    String[] columnNames = result.getColumnNames();
    // get column rows
    RowIterator rowIterator = result.getRows();
    while(rowIterator.hasNext()){
    // get next row
    Row row = rowIterator.nextRow();
    // get all values of row
    Value[] values = row.getValues();
    }</programlisting>


  <para xml:id="JCR.SearchingRepositoryContent.QueryLifecycle.Scoring">
    <citetitle>
      <emphasis role="bold">Scoring</emphasis>
    </citetitle>
  </para>

  <para>The result returns a score for each row in the result set. The
    score contains a value that indicates a rating of how well the result
    node matches the query. A high value means a better matching than a low
    value. This score can be used for ordering the result.
  </para>

  <para>eXo JCR Scoring is a mapping of Lucene scoring. For more
    in-depth understanding, see <ulink
            url="http://lucene.apache.org/core/old_versioned_docs/versions/2_9_4/scoring.html">Lucene
      documentation</ulink>.
  </para>

  <para><parameter>jcr:score</parameter> is counted in the next way - (lucene score)*1000f.</para>

  <para>Score may be increased for specified nodes, see
    <link linkend="JCR.IndexBoostRule">Index boost value</link>.
  </para>

  <para>Also, see an example
    <link linkend="JCR.OrderByScore">Order by score</link>.
  </para>

  <xi:include href="query-usecases.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

 <xi:include href="tip-nodename-with-number.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

</section>

/*
 * Copyright (C) 2009 eXo Platform SAS.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.exoplatform.services.jcr.impl.storage.jdbc.monitor;

import org.exoplatform.services.log.Log;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * Created by The eXo Platform SAS.
 * 
 * <br/>Date: 2-sep-08
 * 
 * @author <a href="mailto:peter.nedonosko@exoplatform.com.ua">Peter Nedonosko</a>
 * @version $Id: ManagedStatement.java 34801 2009-07-31 15:44:50Z dkatayev $
 */
public class ManagedStatement implements Statement
{

   protected final Statement jdbcStmt;

   protected final int interest;

   protected final Log log;

   ManagedStatement(Statement jdbcStmt, int interest, Log log)
   {
      this.jdbcStmt = jdbcStmt;
      this.interest = interest;
      this.log = log;
   }

   public void addBatch(String sql) throws SQLException
   {
      jdbcStmt.addBatch(sql);
   }

   public void cancel() throws SQLException
   {
      jdbcStmt.cancel();
   }

   public void clearBatch() throws SQLException
   {
      jdbcStmt.clearBatch();
   }

   public void clearWarnings() throws SQLException
   {
      jdbcStmt.clearWarnings();
   }

   public void close() throws SQLException
   {
      jdbcStmt.close();
   }

   public boolean execute(String sql) throws SQLException
   {
      return jdbcStmt.execute(sql);
   }

   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
   {
      return jdbcStmt.execute(sql, autoGeneratedKeys);
   }

   public boolean execute(String sql, int[] columnIndexes) throws SQLException
   {
      return jdbcStmt.execute(sql, columnIndexes);
   }

   public boolean execute(String sql, String[] columnNames) throws SQLException
   {
      return jdbcStmt.execute(sql, columnNames);
   }

   public int[] executeBatch() throws SQLException
   {
      return jdbcStmt.executeBatch();
   }

   public ResultSet executeQuery(String sql) throws SQLException
   {
      return jdbcStmt.executeQuery(sql);
   }

   public int executeUpdate(String sql) throws SQLException
   {
      return jdbcStmt.executeUpdate(sql);
   }

   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
   {
      return jdbcStmt.executeUpdate(sql, autoGeneratedKeys);
   }

   public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
   {
      return jdbcStmt.executeUpdate(sql, columnIndexes);
   }

   public int executeUpdate(String sql, String[] columnNames) throws SQLException
   {
      return jdbcStmt.executeUpdate(sql, columnNames);
   }

   public Connection getConnection() throws SQLException
   {
      return jdbcStmt.getConnection();// TODO
   }

   public int getFetchDirection() throws SQLException
   {
      return jdbcStmt.getFetchDirection();
   }

   public int getFetchSize() throws SQLException
   {
      return jdbcStmt.getFetchSize();
   }

   public ResultSet getGeneratedKeys() throws SQLException
   {
      return jdbcStmt.getGeneratedKeys();
   }

   public int getMaxFieldSize() throws SQLException
   {
      return jdbcStmt.getMaxFieldSize();
   }

   public int getMaxRows() throws SQLException
   {
      return jdbcStmt.getMaxRows();
   }

   public boolean getMoreResults() throws SQLException
   {
      return jdbcStmt.getMoreResults();
   }

   public boolean getMoreResults(int current) throws SQLException
   {
      return jdbcStmt.getMoreResults(current);
   }

   public int getQueryTimeout() throws SQLException
   {
      return jdbcStmt.getQueryTimeout();
   }

   public ResultSet getResultSet() throws SQLException
   {
      return jdbcStmt.getResultSet();
   }

   public int getResultSetConcurrency() throws SQLException
   {
      return jdbcStmt.getResultSetConcurrency();
   }

   public int getResultSetHoldability() throws SQLException
   {
      return jdbcStmt.getResultSetHoldability();
   }

   public int getResultSetType() throws SQLException
   {
      return jdbcStmt.getResultSetType();
   }

   public int getUpdateCount() throws SQLException
   {
      return jdbcStmt.getUpdateCount();
   }

   public SQLWarning getWarnings() throws SQLException
   {
      return jdbcStmt.getWarnings();
   }

   public void setCursorName(String name) throws SQLException
   {
      jdbcStmt.setCursorName(name);
   }

   public void setEscapeProcessing(boolean enable) throws SQLException
   {
      jdbcStmt.setEscapeProcessing(enable);
   }

   public void setFetchDirection(int direction) throws SQLException
   {
      jdbcStmt.setFetchDirection(direction);
   }

   public void setFetchSize(int rows) throws SQLException
   {
      jdbcStmt.setFetchSize(rows);
   }

   public void setMaxFieldSize(int max) throws SQLException
   {
      jdbcStmt.setMaxFieldSize(max);
   }

   public void setMaxRows(int max) throws SQLException
   {
      jdbcStmt.setMaxRows(max);
   }

   public void setQueryTimeout(int seconds) throws SQLException
   {
      jdbcStmt.setQueryTimeout(seconds);
   }

}
